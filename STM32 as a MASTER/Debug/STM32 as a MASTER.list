
STM32 as a MASTER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08004f98  08004f98  00005f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005234  08005234  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005234  08005234  00006234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800523c  0800523c  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0000623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00006240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005244  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000068  080052ac  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080052ac  00007288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c93d  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ed  00000000  00000000  000139d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00015ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080b  00000000  00000000  00016560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022624  00000000  00000000  00016d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d254  00000000  00000000  0003938f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc89a  00000000  00000000  000465e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  00112ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  001160d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f80 	.word	0x08004f80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004f80 	.word	0x08004f80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000568:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800056c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	2b00      	cmp	r3, #0
 8000576:	d013      	beq.n	80005a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000578:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800057c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000580:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000584:	2b00      	cmp	r3, #0
 8000586:	d00b      	beq.n	80005a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000588:	e000      	b.n	800058c <ITM_SendChar+0x2c>
    {
      __NOP();
 800058a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800058c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f9      	beq.n	800058a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000596:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	b2d2      	uxtb	r2, r2
 800059e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b086      	sub	sp, #24
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	60f8      	str	r0, [r7, #12]
 80005b6:	60b9      	str	r1, [r7, #8]
 80005b8:	607a      	str	r2, [r7, #4]
  int i=0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ;i++)
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	e009      	b.n	80005d8 <_write+0x2a>
	  ITM_SendChar((*ptr++));
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f7ff ffc7 	bl	8000560 <ITM_SendChar>
  for(i=0 ; i<len ;i++)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	3301      	adds	r3, #1
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697a      	ldr	r2, [r7, #20]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	429a      	cmp	r2, r3
 80005de:	dbf1      	blt.n	80005c4 <_write+0x16>
  return len;
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <sendData>:
	Data[3] = RxData[9]<<8 | RxData[10];
	Data[4] = RxData[11]<<8 | RxData[12];
}*/

void sendData(uint8_t *data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	for(int i=0; i<=sizeof(TxData); i++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	e00a      	b.n	8000610 <sendData+0x24>
	  {
		  printf("data= %d",data[i]);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	4619      	mov	r1, r3
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <sendData+0x60>)
 8000606:	f003 fdb3 	bl	8004170 <iprintf>
	for(int i=0; i<=sizeof(TxData); i++)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	2b08      	cmp	r3, #8
 8000614:	d9f1      	bls.n	80005fa <sendData+0xe>
	  }
	printf("\n");
 8000616:	200a      	movs	r0, #10
 8000618:	f003 fdbc 	bl	8004194 <putchar>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2120      	movs	r1, #32
 8000620:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000624:	f000 feb2 	bl	800138c <HAL_GPIO_WritePin>

	HAL_UART_Transmit(&huart2 , data, 8, 1000);
 8000628:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800062c:	2208      	movs	r2, #8
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	4807      	ldr	r0, [pc, #28]	@ (8000650 <sendData+0x64>)
 8000632:	f002 f8e9 	bl	8002808 <HAL_UART_Transmit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f000 fea5 	bl	800138c <HAL_GPIO_WritePin>
}
 8000642:	bf00      	nop
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	08004f98 	.word	0x08004f98
 8000650:	20000084 	.word	0x20000084

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 faf4 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f873 	bl	8000748 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  printf("Hello\n");
 8000662:	4833      	ldr	r0, [pc, #204]	@ (8000730 <main+0xdc>)
 8000664:	f003 fdf4 	bl	8004250 <puts>
  MX_GPIO_Init();
 8000668:	f000 f8f0 	bl	800084c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f8be 	bl	80007ec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2, RxData, 32);  // HAL_UARTEx_ReceiveToIdle_IT
 8000670:	2220      	movs	r2, #32
 8000672:	4930      	ldr	r1, [pc, #192]	@ (8000734 <main+0xe0>)
 8000674:	4830      	ldr	r0, [pc, #192]	@ (8000738 <main+0xe4>)
 8000676:	f003 fc69 	bl	8003f4c <HAL_UARTEx_ReceiveToIdle_IT>

  TxData[0] = 0x11;  // slave address
 800067a:	4b30      	ldr	r3, [pc, #192]	@ (800073c <main+0xe8>)
 800067c:	2211      	movs	r2, #17
 800067e:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0x03;  // Function code for Read Input Registers
 8000680:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <main+0xe8>)
 8000682:	2203      	movs	r2, #3
 8000684:	705a      	strb	r2, [r3, #1]

  TxData[2] = 0;
 8000686:	4b2d      	ldr	r3, [pc, #180]	@ (800073c <main+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	709a      	strb	r2, [r3, #2]
  TxData[3] = 0x01;  //The Register address will be 00000000 00000001 = 4 +30001 = 30005
 800068c:	4b2b      	ldr	r3, [pc, #172]	@ (800073c <main+0xe8>)
 800068e:	2201      	movs	r2, #1
 8000690:	70da      	strb	r2, [r3, #3]

  TxData[4] = 0;
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <main+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	711a      	strb	r2, [r3, #4]
  TxData[5] = 0x03; // no of registers to read will be 00000000 00000101 = 4 Registers = 8 Bytes
 8000698:	4b28      	ldr	r3, [pc, #160]	@ (800073c <main+0xe8>)
 800069a:	2203      	movs	r2, #3
 800069c:	715a      	strb	r2, [r3, #5]

  uint16_t crc = crc16(TxData, 6);
 800069e:	2106      	movs	r1, #6
 80006a0:	4826      	ldr	r0, [pc, #152]	@ (800073c <main+0xe8>)
 80006a2:	f000 f917 	bl	80008d4 <crc16>
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]
  //char crc = crc16(TxData, 6);
  TxData[6] = crc&0xFF;         // CRC LOW
 80006aa:	88fb      	ldrh	r3, [r7, #6]
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <main+0xe8>)
 80006b0:	719a      	strb	r2, [r3, #6]
  TxData[7] = (crc>>8) & 0xFF;  // CRC HIGH
 80006b2:	88fb      	ldrh	r3, [r7, #6]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4b20      	ldr	r3, [pc, #128]	@ (800073c <main+0xe8>)
 80006bc:	71da      	strb	r2, [r3, #7]

  sendData(TxData);
 80006be:	481f      	ldr	r0, [pc, #124]	@ (800073c <main+0xe8>)
 80006c0:	f7ff ff94 	bl	80005ec <sendData>
  for(int i=0; i<=sizeof(TxData); i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e00a      	b.n	80006e0 <main+0x8c>
  {
	  printf("\n%d\n",TxData[i]);
 80006ca:	4a1c      	ldr	r2, [pc, #112]	@ (800073c <main+0xe8>)
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4619      	mov	r1, r3
 80006d4:	481a      	ldr	r0, [pc, #104]	@ (8000740 <main+0xec>)
 80006d6:	f003 fd4b 	bl	8004170 <iprintf>
  for(int i=0; i<=sizeof(TxData); i++)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b08      	cmp	r3, #8
 80006e4:	d9f1      	bls.n	80006ca <main+0x76>
  }
  printf("\n");
 80006e6:	200a      	movs	r0, #10
 80006e8:	f003 fd54 	bl	8004194 <putchar>
  HAL_UART_Receive(&huart2, RxData, 32,1000);
 80006ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f0:	2220      	movs	r2, #32
 80006f2:	4910      	ldr	r1, [pc, #64]	@ (8000734 <main+0xe0>)
 80006f4:	4810      	ldr	r0, [pc, #64]	@ (8000738 <main+0xe4>)
 80006f6:	f002 f910 	bl	800291a <HAL_UART_Receive>
 // printf("V=HAL_UAR= %d\n,",RxData);
  for(int i=0; i<=sizeof(RxData); i++)
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	e00d      	b.n	800071c <main+0xc8>
    {
  	  printf("%d\n",RxData[i]);
 8000700:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <main+0xe0>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	480e      	ldr	r0, [pc, #56]	@ (8000744 <main+0xf0>)
 800070c:	f003 fd30 	bl	8004170 <iprintf>
  	  HAL_Delay(100);
 8000710:	2064      	movs	r0, #100	@ 0x64
 8000712:	f000 fb0d 	bl	8000d30 <HAL_Delay>
  for(int i=0; i<=sizeof(RxData); i++)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3301      	adds	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	2b20      	cmp	r3, #32
 8000720:	d9ee      	bls.n	8000700 <main+0xac>
 // HAL_UART_Receive(&huart2, RxData, 32);
  /*for(int i=0; i<=100; i++)
    {
  	  printf("RxDData=%c",RxData[i]);
    }*/
  HAL_Delay(2000);
 8000722:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000726:	f000 fb03 	bl	8000d30 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800072a:	bf00      	nop
 800072c:	e7fd      	b.n	800072a <main+0xd6>
 800072e:	bf00      	nop
 8000730:	08004fa4 	.word	0x08004fa4
 8000734:	20000114 	.word	0x20000114
 8000738:	20000084 	.word	0x20000084
 800073c:	2000010c 	.word	0x2000010c
 8000740:	08004fac 	.word	0x08004fac
 8000744:	08004fb4 	.word	0x08004fb4

08000748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b096      	sub	sp, #88	@ 0x58
 800074c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2244      	movs	r2, #68	@ 0x44
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f003 fe5a 	bl	8004410 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800076a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800076e:	f000 fe33 	bl	80013d8 <HAL_PWREx_ControlVoltageScaling>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000778:	f000 f8a6 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000784:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000786:	2310      	movs	r3, #16
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	2302      	movs	r3, #2
 8000790:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000792:	2301      	movs	r3, #1
 8000794:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000796:	230a      	movs	r3, #10
 8000798:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079a:	2307      	movs	r3, #7
 800079c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a2:	2302      	movs	r3, #2
 80007a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 fe6a 	bl	8001484 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80007b6:	f000 f887 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	230f      	movs	r3, #15
 80007bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007be:	2303      	movs	r3, #3
 80007c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2104      	movs	r1, #4
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 fa6a 	bl	8001cac <HAL_RCC_ClockConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007de:	f000 f873 	bl	80008c8 <Error_Handler>
  }
}
 80007e2:	bf00      	nop
 80007e4:	3758      	adds	r7, #88	@ 0x58
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
	...

080007ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 80007f2:	4a15      	ldr	r2, [pc, #84]	@ (8000848 <MX_USART2_UART_Init+0x5c>)
 80007f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f6:	4b13      	ldr	r3, [pc, #76]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b0f      	ldr	r3, [pc, #60]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x58>)
 8000830:	f001 ff9c 	bl	800276c <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800083a:	f000 f845 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000084 	.word	0x20000084
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_GPIO_Init+0x78>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0x78>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_GPIO_Init+0x78>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <MX_GPIO_Init+0x78>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a11      	ldr	r2, [pc, #68]	@ (80008c4 <MX_GPIO_Init+0x78>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <MX_GPIO_Init+0x78>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2132      	movs	r1, #50	@ 0x32
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f000 fd77 	bl	800138c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800089e:	2332      	movs	r3, #50	@ 0x32
 80008a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b8:	f000 fbee 	bl	8001098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40021000 	.word	0x40021000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <crc16>:
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
    0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

uint16_t crc16(uint8_t *buffer, uint16_t buffer_length)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	807b      	strh	r3, [r7, #2]
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
 80008e0:	23ff      	movs	r3, #255	@ 0xff
 80008e2:	73fb      	strb	r3, [r7, #15]
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
 80008e4:	23ff      	movs	r3, #255	@ 0xff
 80008e6:	73bb      	strb	r3, [r7, #14]
    unsigned int i; /* will index into CRC lookup */

    /* pass through message buffer */
    while (buffer_length--) {
 80008e8:	e013      	b.n	8000912 <crc16+0x3e>
        i = crc_lo ^ *buffer++; /* calculate the CRC  */
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	1c5a      	adds	r2, r3, #1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	4053      	eors	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	60bb      	str	r3, [r7, #8]
        crc_lo = crc_hi ^ table_crc_hi[i];
 80008fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <crc16+0x64>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	4413      	add	r3, r2
 8000900:	781a      	ldrb	r2, [r3, #0]
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	4053      	eors	r3, r2
 8000906:	73bb      	strb	r3, [r7, #14]
        crc_hi = table_crc_lo[i];
 8000908:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <crc16+0x68>)
 800090a:	68bb      	ldr	r3, [r7, #8]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	73fb      	strb	r3, [r7, #15]
    while (buffer_length--) {
 8000912:	887b      	ldrh	r3, [r7, #2]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	807a      	strh	r2, [r7, #2]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1e6      	bne.n	80008ea <crc16+0x16>
    }

    return (crc_hi << 8 | crc_lo);
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	b29b      	uxth	r3, r3
}
 800092c:	4618      	mov	r0, r3
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	08004fb8 	.word	0x08004fb8
 800093c:	080050b8 	.word	0x080050b8

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	@ 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	@ 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0a2      	sub	sp, #136	@ 0x88
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2260      	movs	r2, #96	@ 0x60
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fd31 	bl	8004410 <memset>
  if(huart->Instance==USART2)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a24      	ldr	r2, [pc, #144]	@ (8000a44 <HAL_UART_MspInit+0xbc>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d140      	bne.n	8000a3a <HAL_UART_MspInit+0xb2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009bc:	2300      	movs	r3, #0
 80009be:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fb95 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009d0:	f7ff ff7a 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009de:	6593      	str	r3, [r2, #88]	@ 0x58
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	4a15      	ldr	r2, [pc, #84]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <HAL_UART_MspInit+0xc0>)
 80009fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a04:	230c      	movs	r3, #12
 8000a06:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a10:	2303      	movs	r3, #3
 8000a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a16:	2307      	movs	r3, #7
 8000a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a20:	4619      	mov	r1, r3
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a26:	f000 fb37 	bl	8001098 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	2026      	movs	r0, #38	@ 0x26
 8000a30:	f000 fa7d 	bl	8000f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a34:	2026      	movs	r0, #38	@ 0x26
 8000a36:	f000 fa96 	bl	8000f66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3788      	adds	r7, #136	@ 0x88
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40004400 	.word	0x40004400
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f000 f925 	bl	8000cf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <USART2_IRQHandler+0x10>)
 8000ab2:	f001 fffb 	bl	8002aac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000084 	.word	0x20000084

08000ac0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
  }

  return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
  return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	@ (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f003 fc8a 	bl	80044ac <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	@ (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20010000 	.word	0x20010000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000134 	.word	0x20000134
 8000bcc:	20000288 	.word	0x20000288

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f003 fc49 	bl	80044b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fd15 	bl	8000654 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c38:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 8000c3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c40:	20000288 	.word	0x20000288

08000c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f961 	bl	8000f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	200f      	movs	r0, #15
 8000c58:	f000 f80e 	bl	8000c78 <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fe6a 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <HAL_InitTick+0x6c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d023      	beq.n	8000cd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <HAL_InitTick+0x70>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b14      	ldr	r3, [pc, #80]	@ (8000ce4 <HAL_InitTick+0x6c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f96d 	bl	8000f82 <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10f      	bne.n	8000cce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d809      	bhi.n	8000cc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f000 f937 	bl	8000f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cec <HAL_InitTick+0x74>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e007      	b.n	8000cd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	73fb      	strb	r3, [r7, #15]
 8000ccc:	e004      	b.n	8000cd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e001      	b.n	8000cd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000004 	.word	0x20000004

08000cf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_IncTick+0x20>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x24>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <HAL_IncTick+0x24>)
 8000d02:	6013      	str	r3, [r2, #0]
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000138 	.word	0x20000138

08000d18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <HAL_GetTick+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000138 	.word	0x20000138

08000d30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d38:	f7ff ffee 	bl	8000d18 <HAL_GetTick>
 8000d3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d48:	d005      	beq.n	8000d56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_Delay+0x44>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d56:	bf00      	nop
 8000d58:	f7ff ffde 	bl	8000d18 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	68fa      	ldr	r2, [r7, #12]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d8f7      	bhi.n	8000d58 <HAL_Delay+0x28>
  {
  }
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000008 	.word	0x20000008

08000d78 <__NVIC_SetPriorityGrouping>:
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d8e:	68ba      	ldr	r2, [r7, #8]
 8000d90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000daa:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <__NVIC_SetPriorityGrouping+0x44>)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	60d3      	str	r3, [r2, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_GetPriorityGrouping>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	f003 0307 	and.w	r3, r3, #7
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_EnableIRQ>:
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	db0b      	blt.n	8000e06 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	f003 021f 	and.w	r2, r3, #31
 8000df4:	4907      	ldr	r1, [pc, #28]	@ (8000e14 <__NVIC_EnableIRQ+0x38>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	095b      	lsrs	r3, r3, #5
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000e100 	.word	0xe000e100

08000e18 <__NVIC_SetPriority>:
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	db0a      	blt.n	8000e42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	490c      	ldr	r1, [pc, #48]	@ (8000e64 <__NVIC_SetPriority+0x4c>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	0112      	lsls	r2, r2, #4
 8000e38:	b2d2      	uxtb	r2, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e40:	e00a      	b.n	8000e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	b2da      	uxtb	r2, r3
 8000e46:	4908      	ldr	r1, [pc, #32]	@ (8000e68 <__NVIC_SetPriority+0x50>)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	f003 030f 	and.w	r3, r3, #15
 8000e4e:	3b04      	subs	r3, #4
 8000e50:	0112      	lsls	r2, r2, #4
 8000e52:	b2d2      	uxtb	r2, r2
 8000e54:	440b      	add	r3, r1
 8000e56:	761a      	strb	r2, [r3, #24]
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000e100 	.word	0xe000e100
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <NVIC_EncodePriority>:
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b089      	sub	sp, #36	@ 0x24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	f1c3 0307 	rsb	r3, r3, #7
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	bf28      	it	cs
 8000e8a:	2304      	movcs	r3, #4
 8000e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3304      	adds	r3, #4
 8000e92:	2b06      	cmp	r3, #6
 8000e94:	d902      	bls.n	8000e9c <NVIC_EncodePriority+0x30>
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3b03      	subs	r3, #3
 8000e9a:	e000      	b.n	8000e9e <NVIC_EncodePriority+0x32>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	401a      	ands	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebe:	43d9      	mvns	r1, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	4313      	orrs	r3, r2
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3724      	adds	r7, #36	@ 0x24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <SysTick_Config>:
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee4:	d301      	bcc.n	8000eea <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00f      	b.n	8000f0a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eea:	4a0a      	ldr	r2, [pc, #40]	@ (8000f14 <SysTick_Config+0x40>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f7ff ff8e 	bl	8000e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <SysTick_Config+0x40>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f02:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <SysTick_Config+0x40>)
 8000f04:	2207      	movs	r2, #7
 8000f06:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	e000e010 	.word	0xe000e010

08000f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f7ff ff29 	bl	8000d78 <__NVIC_SetPriorityGrouping>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f40:	f7ff ff3e 	bl	8000dc0 <__NVIC_GetPriorityGrouping>
 8000f44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	68b9      	ldr	r1, [r7, #8]
 8000f4a:	6978      	ldr	r0, [r7, #20]
 8000f4c:	f7ff ff8e 	bl	8000e6c <NVIC_EncodePriority>
 8000f50:	4602      	mov	r2, r0
 8000f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff5d 	bl	8000e18 <__NVIC_SetPriority>
}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff31 	bl	8000ddc <__NVIC_EnableIRQ>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ffa2 	bl	8000ed4 <SysTick_Config>
 8000f90:	4603      	mov	r3, r0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b085      	sub	sp, #20
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2204      	movs	r2, #4
 8000fb6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e022      	b.n	800100a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 020e 	bic.w	r2, r2, #14
 8000fd2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0201 	bic.w	r2, r2, #1
 8000fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe8:	f003 021c 	and.w	r2, r3, #28
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d005      	beq.n	800103a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2204      	movs	r2, #4
 8001032:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e029      	b.n	800108e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 020e 	bic.w	r2, r2, #14
 8001048:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f022 0201 	bic.w	r2, r2, #1
 8001058:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	f003 021c 	and.w	r2, r3, #28
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001066:	2101      	movs	r1, #1
 8001068:	fa01 f202 	lsl.w	r2, r1, r2
 800106c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2201      	movs	r2, #1
 8001072:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	4798      	blx	r3
    }
  }
  return status;
 800108e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3710      	adds	r7, #16
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a6:	e154      	b.n	8001352 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	4013      	ands	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f000 8146 	beq.w	800134c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d005      	beq.n	80010d8 <HAL_GPIO_Init+0x40>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d130      	bne.n	800113a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	2203      	movs	r2, #3
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	68da      	ldr	r2, [r3, #12]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4313      	orrs	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110e:	2201      	movs	r2, #1
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	f003 0201 	and.w	r2, r3, #1
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	4313      	orrs	r3, r2
 8001132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
 8001142:	2b03      	cmp	r3, #3
 8001144:	d017      	beq.n	8001176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b02      	cmp	r3, #2
 8001180:	d123      	bne.n	80011ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	08da      	lsrs	r2, r3, #3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3208      	adds	r2, #8
 800118a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	08da      	lsrs	r2, r3, #3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3208      	adds	r2, #8
 80011c4:	6939      	ldr	r1, [r7, #16]
 80011c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	2203      	movs	r2, #3
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0203 	and.w	r2, r3, #3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001206:	2b00      	cmp	r3, #0
 8001208:	f000 80a0 	beq.w	800134c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120c:	4b58      	ldr	r3, [pc, #352]	@ (8001370 <HAL_GPIO_Init+0x2d8>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001210:	4a57      	ldr	r2, [pc, #348]	@ (8001370 <HAL_GPIO_Init+0x2d8>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	6613      	str	r3, [r2, #96]	@ 0x60
 8001218:	4b55      	ldr	r3, [pc, #340]	@ (8001370 <HAL_GPIO_Init+0x2d8>)
 800121a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001224:	4a53      	ldr	r2, [pc, #332]	@ (8001374 <HAL_GPIO_Init+0x2dc>)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	3302      	adds	r3, #2
 800122c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	220f      	movs	r2, #15
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800124e:	d019      	beq.n	8001284 <HAL_GPIO_Init+0x1ec>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <HAL_GPIO_Init+0x2e0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d013      	beq.n	8001280 <HAL_GPIO_Init+0x1e8>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2e4>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d00d      	beq.n	800127c <HAL_GPIO_Init+0x1e4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2e8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_GPIO_Init+0x1e0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_GPIO_Init+0x2ec>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_GPIO_Init+0x1dc>
 8001270:	2304      	movs	r3, #4
 8001272:	e008      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001274:	2307      	movs	r3, #7
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1ee>
 8001284:	2300      	movs	r3, #0
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001296:	4937      	ldr	r1, [pc, #220]	@ (8001374 <HAL_GPIO_Init+0x2dc>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a4:	4b38      	ldr	r3, [pc, #224]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c8:	4a2f      	ldr	r2, [pc, #188]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f2:	4a25      	ldr	r2, [pc, #148]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800131c:	4a1a      	ldr	r2, [pc, #104]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001322:	4b19      	ldr	r3, [pc, #100]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_GPIO_Init+0x2f0>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f aea3 	bne.w	80010a8 <HAL_GPIO_Init+0x10>
  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
 8001398:	4613      	mov	r3, r2
 800139a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800139c:	787b      	ldrb	r3, [r7, #1]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a2:	887a      	ldrh	r2, [r7, #2]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40007000 	.word	0x40007000

080013d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013e6:	d130      	bne.n	800144a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e8:	4b23      	ldr	r3, [pc, #140]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f4:	d038      	beq.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f6:	4b20      	ldr	r3, [pc, #128]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001400:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001406:	4b1d      	ldr	r3, [pc, #116]	@ (800147c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2232      	movs	r2, #50	@ 0x32
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	4a1b      	ldr	r2, [pc, #108]	@ (8001480 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	0c9b      	lsrs	r3, r3, #18
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141c:	e002      	b.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3b01      	subs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001424:	4b14      	ldr	r3, [pc, #80]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800142c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001430:	d102      	bne.n	8001438 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1f2      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001438:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001444:	d110      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e00f      	b.n	800146a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800144a:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001456:	d007      	beq.n	8001468 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001460:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001462:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001466:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40007000 	.word	0x40007000
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83

08001484 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	f000 bc02 	b.w	8001c9c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001498:	4b96      	ldr	r3, [pc, #600]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 030c 	and.w	r3, r3, #12
 80014a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014a2:	4b94      	ldr	r3, [pc, #592]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80e4 	beq.w	8001682 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d007      	beq.n	80014d0 <HAL_RCC_OscConfig+0x4c>
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	f040 808b 	bne.w	80015de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	f040 8087 	bne.w	80015de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d0:	4b88      	ldr	r3, [pc, #544]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x64>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e3d9      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1a      	ldr	r2, [r3, #32]
 80014ec:	4b81      	ldr	r3, [pc, #516]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_RCC_OscConfig+0x7e>
 80014f8:	4b7e      	ldr	r3, [pc, #504]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001500:	e005      	b.n	800150e <HAL_RCC_OscConfig+0x8a>
 8001502:	4b7c      	ldr	r3, [pc, #496]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800150e:	4293      	cmp	r3, r2
 8001510:	d223      	bcs.n	800155a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd8c 	bl	8002034 <RCC_SetFlashLatencyFromMSIRange>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e3ba      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001526:	4b73      	ldr	r3, [pc, #460]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a72      	ldr	r2, [pc, #456]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b70      	ldr	r3, [pc, #448]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	496d      	ldr	r1, [pc, #436]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001544:	4b6b      	ldr	r3, [pc, #428]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69db      	ldr	r3, [r3, #28]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	4968      	ldr	r1, [pc, #416]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
 8001558:	e025      	b.n	80015a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	4b66      	ldr	r3, [pc, #408]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a65      	ldr	r2, [pc, #404]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	4b63      	ldr	r3, [pc, #396]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	4960      	ldr	r1, [pc, #384]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001578:	4b5e      	ldr	r3, [pc, #376]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	495b      	ldr	r1, [pc, #364]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 fd4c 	bl	8002034 <RCC_SetFlashLatencyFromMSIRange>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e37a      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a6:	f000 fc81 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 80015aa:	4602      	mov	r2, r0
 80015ac:	4b51      	ldr	r3, [pc, #324]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	4950      	ldr	r1, [pc, #320]	@ (80016f8 <HAL_RCC_OscConfig+0x274>)
 80015b8:	5ccb      	ldrb	r3, [r1, r3]
 80015ba:	f003 031f 	and.w	r3, r3, #31
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	4a4e      	ldr	r2, [pc, #312]	@ (80016fc <HAL_RCC_OscConfig+0x278>)
 80015c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001700 <HAL_RCC_OscConfig+0x27c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fb54 	bl	8000c78 <HAL_InitTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d052      	beq.n	8001680 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	e35e      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d032      	beq.n	800164c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e6:	4b43      	ldr	r3, [pc, #268]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a42      	ldr	r2, [pc, #264]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb91 	bl	8000d18 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb8d 	bl	8000d18 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e347      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001618:	4b36      	ldr	r3, [pc, #216]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a35      	ldr	r2, [pc, #212]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	4b33      	ldr	r3, [pc, #204]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4930      	ldr	r1, [pc, #192]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001636:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	492b      	ldr	r1, [pc, #172]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
 800164a:	e01a      	b.n	8001682 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800164c:	4b29      	ldr	r3, [pc, #164]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a28      	ldr	r2, [pc, #160]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb5e 	bl	8000d18 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001660:	f7ff fb5a 	bl	8000d18 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e314      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001672:	4b20      	ldr	r3, [pc, #128]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x1dc>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	d073      	beq.n	8001776 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b08      	cmp	r3, #8
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x21c>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d10b      	bne.n	80016b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d063      	beq.n	8001774 <HAL_RCC_OscConfig+0x2f0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d15f      	bne.n	8001774 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e2f1      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016c0:	d106      	bne.n	80016d0 <HAL_RCC_OscConfig+0x24c>
 80016c2:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a0b      	ldr	r2, [pc, #44]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e025      	b.n	800171c <HAL_RCC_OscConfig+0x298>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016d8:	d114      	bne.n	8001704 <HAL_RCC_OscConfig+0x280>
 80016da:	4b06      	ldr	r3, [pc, #24]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	4b03      	ldr	r3, [pc, #12]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a02      	ldr	r2, [pc, #8]	@ (80016f4 <HAL_RCC_OscConfig+0x270>)
 80016ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	e013      	b.n	800171c <HAL_RCC_OscConfig+0x298>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	080051b8 	.word	0x080051b8
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004
 8001704:	4ba0      	ldr	r3, [pc, #640]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a9f      	ldr	r2, [pc, #636]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b9d      	ldr	r3, [pc, #628]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a9c      	ldr	r2, [pc, #624]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff faf8 	bl	8000d18 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff faf4 	bl	8000d18 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	@ 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e2ae      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173e:	4b92      	ldr	r3, [pc, #584]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x2a8>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fae4 	bl	8000d18 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fae0 	bl	8000d18 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e29a      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001766:	4b88      	ldr	r3, [pc, #544]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x2d0>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d060      	beq.n	8001844 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b04      	cmp	r3, #4
 8001786:	d005      	beq.n	8001794 <HAL_RCC_OscConfig+0x310>
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	2b0c      	cmp	r3, #12
 800178c:	d119      	bne.n	80017c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d116      	bne.n	80017c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001794:	4b7c      	ldr	r3, [pc, #496]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_OscConfig+0x328>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e277      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ac:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	061b      	lsls	r3, r3, #24
 80017ba:	4973      	ldr	r1, [pc, #460]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c0:	e040      	b.n	8001844 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68db      	ldr	r3, [r3, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d023      	beq.n	8001812 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ca:	4b6f      	ldr	r3, [pc, #444]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a6e      	ldr	r2, [pc, #440]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fa9f 	bl	8000d18 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fa9b 	bl	8000d18 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e255      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017f0:	4b65      	ldr	r3, [pc, #404]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b62      	ldr	r3, [pc, #392]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	495f      	ldr	r1, [pc, #380]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
 8001810:	e018      	b.n	8001844 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b5d      	ldr	r3, [pc, #372]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a5c      	ldr	r2, [pc, #368]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800181c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff fa7b 	bl	8000d18 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fa77 	bl	8000d18 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e231      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001838:	4b53      	ldr	r3, [pc, #332]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1f0      	bne.n	8001826 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03c      	beq.n	80018ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001858:	4b4b      	ldr	r3, [pc, #300]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800185a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800185e:	4a4a      	ldr	r2, [pc, #296]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fa56 	bl	8000d18 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff fa52 	bl	8000d18 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e20c      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001882:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x3ec>
 8001890:	e01b      	b.n	80018ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	4a3b      	ldr	r2, [pc, #236]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff fa39 	bl	8000d18 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fa35 	bl	8000d18 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e1ef      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018bc:	4b32      	ldr	r3, [pc, #200]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 80a6 	beq.w	8001a24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10d      	bne.n	8001904 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e8:	4b27      	ldr	r3, [pc, #156]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ec:	4a26      	ldr	r2, [pc, #152]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 80018f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001900:	2301      	movs	r3, #1
 8001902:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001904:	4b21      	ldr	r3, [pc, #132]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d118      	bne.n	8001942 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001910:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a1d      	ldr	r2, [pc, #116]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191c:	f7ff f9fc 	bl	8000d18 <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001924:	f7ff f9f8 	bl	8000d18 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1b2      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001936:	4b15      	ldr	r3, [pc, #84]	@ (800198c <HAL_RCC_OscConfig+0x508>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d108      	bne.n	800195c <HAL_RCC_OscConfig+0x4d8>
 800194a:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800194c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800195a:	e029      	b.n	80019b0 <HAL_RCC_OscConfig+0x52c>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d115      	bne.n	8001990 <HAL_RCC_OscConfig+0x50c>
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800196a:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800196c:	f043 0304 	orr.w	r3, r3, #4
 8001970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001974:	4b04      	ldr	r3, [pc, #16]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197a:	4a03      	ldr	r2, [pc, #12]	@ (8001988 <HAL_RCC_OscConfig+0x504>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001984:	e014      	b.n	80019b0 <HAL_RCC_OscConfig+0x52c>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000
 800198c:	40007000 	.word	0x40007000
 8001990:	4b9a      	ldr	r3, [pc, #616]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001996:	4a99      	ldr	r2, [pc, #612]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019a0:	4b96      	ldr	r3, [pc, #600]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a6:	4a95      	ldr	r2, [pc, #596]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d016      	beq.n	80019e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff f9ae 	bl	8000d18 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f9aa 	bl	8000d18 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e162      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019d6:	4b89      	ldr	r3, [pc, #548]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ed      	beq.n	80019c0 <HAL_RCC_OscConfig+0x53c>
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff f997 	bl	8000d18 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f993 	bl	8000d18 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e14b      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a04:	4b7d      	ldr	r3, [pc, #500]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ed      	bne.n	80019ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a12:	7ffb      	ldrb	r3, [r7, #31]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d105      	bne.n	8001a24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a18:	4b78      	ldr	r3, [pc, #480]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	4a77      	ldr	r2, [pc, #476]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0320 	and.w	r3, r3, #32
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d03c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d01c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a38:	4b70      	ldr	r3, [pc, #448]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f966 	bl	8000d18 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a50:	f7ff f962 	bl	8000d18 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e11c      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a62:	4b66      	ldr	r3, [pc, #408]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ef      	beq.n	8001a50 <HAL_RCC_OscConfig+0x5cc>
 8001a70:	e01b      	b.n	8001aaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a72:	4b62      	ldr	r3, [pc, #392]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a78:	4a60      	ldr	r2, [pc, #384]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a82:	f7ff f949 	bl	8000d18 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a8a:	f7ff f945 	bl	8000d18 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e0ff      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a9c:	4b57      	ldr	r3, [pc, #348]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001a9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 80f3 	beq.w	8001c9a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 80c9 	bne.w	8001c50 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001abe:	4b4f      	ldr	r3, [pc, #316]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d12c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001adc:	3b01      	subs	r3, #1
 8001ade:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d123      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001aee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d11b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001afe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d113      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b0e:	085b      	lsrs	r3, r3, #1
 8001b10:	3b01      	subs	r3, #1
 8001b12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d109      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	3b01      	subs	r3, #1
 8001b26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d06b      	beq.n	8001c04 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b0c      	cmp	r3, #12
 8001b30:	d062      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b32:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0ac      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a2d      	ldr	r2, [pc, #180]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001b48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4e:	f7ff f8e3 	bl	8000d18 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7ff f8df 	bl	8000d18 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e099      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b74:	4b21      	ldr	r3, [pc, #132]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b21      	ldr	r3, [pc, #132]	@ (8001c00 <HAL_RCC_OscConfig+0x77c>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001b84:	3a01      	subs	r2, #1
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	4311      	orrs	r1, r2
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001b8e:	0212      	lsls	r2, r2, #8
 8001b90:	4311      	orrs	r1, r2
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b96:	0852      	lsrs	r2, r2, #1
 8001b98:	3a01      	subs	r2, #1
 8001b9a:	0552      	lsls	r2, r2, #21
 8001b9c:	4311      	orrs	r1, r2
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ba2:	0852      	lsrs	r2, r2, #1
 8001ba4:	3a01      	subs	r2, #1
 8001ba6:	0652      	lsls	r2, r2, #25
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bae:	06d2      	lsls	r2, r2, #27
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	4912      	ldr	r1, [pc, #72]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb8:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bd0:	f7ff f8a2 	bl	8000d18 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd8:	f7ff f89e 	bl	8000d18 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e058      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <HAL_RCC_OscConfig+0x778>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d0f0      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf6:	e050      	b.n	8001c9a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04f      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d144      	bne.n	8001c9a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a23      	ldr	r2, [pc, #140]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	4a20      	ldr	r2, [pc, #128]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c28:	f7ff f876 	bl	8000d18 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c30:	f7ff f872 	bl	8000d18 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e02c      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b18      	ldr	r3, [pc, #96]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0x7ac>
 8001c4e:	e024      	b.n	8001c9a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d01f      	beq.n	8001c96 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c56:	4b13      	ldr	r3, [pc, #76]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff f859 	bl	8000d18 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f855 	bl	8000d18 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e00f      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4905      	ldr	r1, [pc, #20]	@ (8001ca4 <HAL_RCC_OscConfig+0x820>)
 8001c8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ca8 <HAL_RCC_OscConfig+0x824>)
 8001c90:	4013      	ands	r3, r2
 8001c92:	60cb      	str	r3, [r1, #12]
 8001c94:	e001      	b.n	8001c9a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	feeefffc 	.word	0xfeeefffc

08001cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e0e7      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b75      	ldr	r3, [pc, #468]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d910      	bls.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b72      	ldr	r3, [pc, #456]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 0207 	bic.w	r2, r3, #7
 8001cd6:	4970      	ldr	r1, [pc, #448]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cde:	4b6e      	ldr	r3, [pc, #440]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e0cf      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d010      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d908      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	4960      	ldr	r1, [pc, #384]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d04c      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d32:	4b5a      	ldr	r3, [pc, #360]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d121      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0a6      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	4b54      	ldr	r3, [pc, #336]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d115      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e09a      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d62:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e08e      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d72:	4b4a      	ldr	r3, [pc, #296]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e086      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d82:	4b46      	ldr	r3, [pc, #280]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f023 0203 	bic.w	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4943      	ldr	r1, [pc, #268]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d94:	f7fe ffc0 	bl	8000d18 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d9c:	f7fe ffbc 	bl	8000d18 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e06e      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 020c 	and.w	r2, r3, #12
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d1eb      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d208      	bcs.n	8001df2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	492b      	ldr	r1, [pc, #172]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001df2:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d210      	bcs.n	8001e22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e00:	4b25      	ldr	r3, [pc, #148]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 0207 	bic.w	r2, r3, #7
 8001e08:	4923      	ldr	r1, [pc, #140]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_RCC_ClockConfig+0x1ec>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e036      	b.n	8001e90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d008      	beq.n	8001e40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	4918      	ldr	r1, [pc, #96]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e4c:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	4910      	ldr	r1, [pc, #64]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e60:	f000 f824 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e64:	4602      	mov	r2, r0
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_RCC_ClockConfig+0x1f0>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	091b      	lsrs	r3, r3, #4
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	490b      	ldr	r1, [pc, #44]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e72:	5ccb      	ldrb	r3, [r1, r3]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e80:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fef7 	bl	8000c78 <HAL_InitTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e8e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080051b8 	.word	0x080051b8
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	@ 0x24
 8001eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d121      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d11e      	bne.n	8001f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ee0:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d107      	bne.n	8001efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001eec:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	0a1b      	lsrs	r3, r3, #8
 8001ef4:	f003 030f 	and.w	r3, r3, #15
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e005      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001efc:	4b2d      	ldr	r3, [pc, #180]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	091b      	lsrs	r3, r3, #4
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f08:	4a2b      	ldr	r2, [pc, #172]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f1c:	e00a      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d102      	bne.n	8001f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f26:	61bb      	str	r3, [r7, #24]
 8001f28:	e004      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f30:	4b23      	ldr	r3, [pc, #140]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d134      	bne.n	8001fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d003      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0xac>
 8001f50:	e005      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001f54:	617b      	str	r3, [r7, #20]
      break;
 8001f56:	e005      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f5a:	617b      	str	r3, [r7, #20]
      break;
 8001f5c:	e002      	b.n	8001f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	617b      	str	r3, [r7, #20]
      break;
 8001f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	3301      	adds	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	fb03 f202 	mul.w	r2, r3, r2
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	0e5b      	lsrs	r3, r3, #25
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	3301      	adds	r3, #1
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	080051d0 	.word	0x080051d0
 8001fbc:	00f42400 	.word	0x00f42400
 8001fc0:	007a1200 	.word	0x007a1200

08001fc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	@ (8001fd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20000000 	.word	0x20000000

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fe0:	f7ff fff0 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4904      	ldr	r1, [pc, #16]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	080051c8 	.word	0x080051c8

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800200c:	f7ff ffda 	bl	8001fc4 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4904      	ldr	r1, [pc, #16]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x28>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	080051c8 	.word	0x080051c8

08002034 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800203c:	2300      	movs	r3, #0
 800203e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002040:	4b2a      	ldr	r3, [pc, #168]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800204c:	f7ff f9b6 	bl	80013bc <HAL_PWREx_GetVoltageRange>
 8002050:	6178      	str	r0, [r7, #20]
 8002052:	e014      	b.n	800207e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002058:	4a24      	ldr	r2, [pc, #144]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800205a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800205e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002060:	4b22      	ldr	r3, [pc, #136]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800206c:	f7ff f9a6 	bl	80013bc <HAL_PWREx_GetVoltageRange>
 8002070:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002084:	d10b      	bne.n	800209e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b80      	cmp	r3, #128	@ 0x80
 800208a:	d919      	bls.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002090:	d902      	bls.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002092:	2302      	movs	r3, #2
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	e013      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	e010      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b80      	cmp	r3, #128	@ 0x80
 80020a2:	d902      	bls.n	80020aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020a4:	2303      	movs	r3, #3
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	e00a      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b80      	cmp	r3, #128	@ 0x80
 80020ae:	d102      	bne.n	80020b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020b0:	2302      	movs	r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	e004      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b70      	cmp	r3, #112	@ 0x70
 80020ba:	d101      	bne.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020bc:	2301      	movs	r3, #1
 80020be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f023 0207 	bic.w	r2, r3, #7
 80020c8:	4909      	ldr	r1, [pc, #36]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020d0:	4b07      	ldr	r3, [pc, #28]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d001      	beq.n	80020e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020fc:	2300      	movs	r3, #0
 80020fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002100:	2300      	movs	r3, #0
 8002102:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210c:	2b00      	cmp	r3, #0
 800210e:	d031      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002114:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002118:	d01a      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800211a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800211e:	d814      	bhi.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002124:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002128:	d10f      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800212a:	4b5d      	ldr	r3, [pc, #372]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	4a5c      	ldr	r2, [pc, #368]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002134:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002136:	e00c      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3304      	adds	r3, #4
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f000 fa22 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002148:	e003      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	74fb      	strb	r3, [r7, #19]
      break;
 800214e:	e000      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002152:	7cfb      	ldrb	r3, [r7, #19]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10b      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002158:	4b51      	ldr	r3, [pc, #324]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002166:	494e      	ldr	r1, [pc, #312]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800216e:	e001      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 809e 	beq.w	80022be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002186:	4b46      	ldr	r3, [pc, #280]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002196:	2300      	movs	r3, #0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00d      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	4b40      	ldr	r3, [pc, #256]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a0:	4a3f      	ldr	r2, [pc, #252]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a8:	4b3d      	ldr	r3, [pc, #244]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021b4:	2301      	movs	r3, #1
 80021b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021b8:	4b3a      	ldr	r3, [pc, #232]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a39      	ldr	r2, [pc, #228]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021c4:	f7fe fda8 	bl	8000d18 <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021ca:	e009      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021cc:	f7fe fda4 	bl	8000d18 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d902      	bls.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	74fb      	strb	r3, [r7, #19]
        break;
 80021de:	e005      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ef      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021ec:	7cfb      	ldrb	r3, [r7, #19]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d15a      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d01e      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	429a      	cmp	r2, r3
 800220c:	d019      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002218:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800221c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002220:	4a1f      	ldr	r2, [pc, #124]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800222a:	4b1d      	ldr	r3, [pc, #116]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800222c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002230:	4a1b      	ldr	r2, [pc, #108]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002232:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800223a:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d016      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800224c:	f7fe fd64 	bl	8000d18 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	e00b      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7fe fd60 	bl	8000d18 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d902      	bls.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	74fb      	strb	r3, [r7, #19]
            break;
 800226a:	e006      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0ec      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002280:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002286:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800228e:	4904      	ldr	r1, [pc, #16]	@ (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002296:	e009      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
 800229c:	e006      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800229e:	bf00      	nop
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ac:	7c7b      	ldrb	r3, [r7, #17]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b8d      	ldr	r3, [pc, #564]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a8c      	ldr	r2, [pc, #560]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022ca:	4b87      	ldr	r3, [pc, #540]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f023 0203 	bic.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4983      	ldr	r1, [pc, #524]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00a      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ec:	4b7e      	ldr	r3, [pc, #504]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f023 020c 	bic.w	r2, r3, #12
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022fa:	497b      	ldr	r1, [pc, #492]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800230e:	4b76      	ldr	r3, [pc, #472]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002314:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231c:	4972      	ldr	r1, [pc, #456]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002330:	4b6d      	ldr	r3, [pc, #436]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002336:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	496a      	ldr	r1, [pc, #424]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00a      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002352:	4b65      	ldr	r3, [pc, #404]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002358:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002360:	4961      	ldr	r1, [pc, #388]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002374:	4b5c      	ldr	r3, [pc, #368]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	4959      	ldr	r1, [pc, #356]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002384:	4313      	orrs	r3, r2
 8002386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00a      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002396:	4b54      	ldr	r3, [pc, #336]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a4:	4950      	ldr	r1, [pc, #320]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b8:	4b4b      	ldr	r3, [pc, #300]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c6:	4948      	ldr	r1, [pc, #288]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023da:	4b43      	ldr	r3, [pc, #268]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	493f      	ldr	r1, [pc, #252]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d028      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023fc:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002402:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800240a:	4937      	ldr	r1, [pc, #220]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800241a:	d106      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800241c:	4b32      	ldr	r3, [pc, #200]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a31      	ldr	r2, [pc, #196]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002426:	60d3      	str	r3, [r2, #12]
 8002428:	e011      	b.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800242e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002432:	d10c      	bne.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3304      	adds	r3, #4
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f8a4 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002440:	4603      	mov	r3, r0
 8002442:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d028      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002460:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	491f      	ldr	r1, [pc, #124]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002478:	d106      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002480:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002484:	60d3      	str	r3, [r2, #12]
 8002486:	e011      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002490:	d10c      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	2101      	movs	r1, #1
 8002498:	4618      	mov	r0, r3
 800249a:	f000 f875 	bl	8002588 <RCCEx_PLLSAI1_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d02b      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024b8:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024c6:	4908      	ldr	r1, [pc, #32]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024d6:	d109      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024d8:	4b03      	ldr	r3, [pc, #12]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	4a02      	ldr	r2, [pc, #8]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024e2:	60d3      	str	r3, [r2, #12]
 80024e4:	e014      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024f4:	d10c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3304      	adds	r3, #4
 80024fa:	2101      	movs	r1, #1
 80024fc:	4618      	mov	r0, r3
 80024fe:	f000 f843 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002502:	4603      	mov	r3, r0
 8002504:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002506:	7cfb      	ldrb	r3, [r7, #19]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d01c      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800251c:	4b19      	ldr	r3, [pc, #100]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800251e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002522:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252a:	4916      	ldr	r1, [pc, #88]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252c:	4313      	orrs	r3, r2
 800252e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002536:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800253a:	d10c      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	2102      	movs	r1, #2
 8002542:	4618      	mov	r0, r3
 8002544:	f000 f820 	bl	8002588 <RCCEx_PLLSAI1_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002552:	7cfb      	ldrb	r3, [r7, #19]
 8002554:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002568:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	4904      	ldr	r1, [pc, #16]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002578:	7cbb      	ldrb	r3, [r7, #18]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40021000 	.word	0x40021000

08002588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	2300      	movs	r3, #0
 8002594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002596:	4b74      	ldr	r3, [pc, #464]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d018      	beq.n	80025d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025a2:	4b71      	ldr	r3, [pc, #452]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0203 	and.w	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10d      	bne.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
       ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	091b      	lsrs	r3, r3, #4
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d047      	beq.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	73fb      	strb	r3, [r7, #15]
 80025d2:	e044      	b.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d018      	beq.n	800260e <RCCEx_PLLSAI1_Config+0x86>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d825      	bhi.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d002      	beq.n	80025ea <RCCEx_PLLSAI1_Config+0x62>
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d009      	beq.n	80025fc <RCCEx_PLLSAI1_Config+0x74>
 80025e8:	e020      	b.n	800262c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11d      	bne.n	8002632 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fa:	e01a      	b.n	8002632 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025fc:	4b5a      	ldr	r3, [pc, #360]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d116      	bne.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260c:	e013      	b.n	8002636 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800260e:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800261a:	4b53      	ldr	r3, [pc, #332]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d109      	bne.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800262a:	e006      	b.n	800263a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
      break;
 8002630:	e004      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002632:	bf00      	nop
 8002634:	e002      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002636:	bf00      	nop
 8002638:	e000      	b.n	800263c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800263a:	bf00      	nop
    }

    if(status == HAL_OK)
 800263c:	7bfb      	ldrb	r3, [r7, #15]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10d      	bne.n	800265e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002642:	4b49      	ldr	r3, [pc, #292]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	3b01      	subs	r3, #1
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	430b      	orrs	r3, r1
 8002658:	4943      	ldr	r1, [pc, #268]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	4313      	orrs	r3, r2
 800265c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d17c      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002664:	4b40      	ldr	r3, [pc, #256]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a3f      	ldr	r2, [pc, #252]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800266e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002670:	f7fe fb52 	bl	8000d18 <HAL_GetTick>
 8002674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002676:	e009      	b.n	800268c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002678:	f7fe fb4e 	bl	8000d18 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d902      	bls.n	800268c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	73fb      	strb	r3, [r7, #15]
        break;
 800268a:	e005      	b.n	8002698 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1ef      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d15f      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d110      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a4:	4b30      	ldr	r3, [pc, #192]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 80026ac:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	0211      	lsls	r1, r2, #8
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	06d2      	lsls	r2, r2, #27
 80026bc:	430a      	orrs	r2, r1
 80026be:	492a      	ldr	r1, [pc, #168]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	610b      	str	r3, [r1, #16]
 80026c4:	e027      	b.n	8002716 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d112      	bne.n	80026f2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80026d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	0211      	lsls	r1, r2, #8
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6912      	ldr	r2, [r2, #16]
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0552      	lsls	r2, r2, #21
 80026e8:	430a      	orrs	r2, r1
 80026ea:	491f      	ldr	r1, [pc, #124]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	610b      	str	r3, [r1, #16]
 80026f0:	e011      	b.n	8002716 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6892      	ldr	r2, [r2, #8]
 8002702:	0211      	lsls	r1, r2, #8
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6952      	ldr	r2, [r2, #20]
 8002708:	0852      	lsrs	r2, r2, #1
 800270a:	3a01      	subs	r2, #1
 800270c:	0652      	lsls	r2, r2, #25
 800270e:	430a      	orrs	r2, r1
 8002710:	4915      	ldr	r1, [pc, #84]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002716:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800271c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002720:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe faf9 	bl	8000d18 <HAL_GetTick>
 8002726:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002728:	e009      	b.n	800273e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800272a:	f7fe faf5 	bl	8000d18 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d902      	bls.n	800273e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	73fb      	strb	r3, [r7, #15]
          break;
 800273c:	e005      	b.n	800274a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800273e:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ef      	beq.n	800272a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d106      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002750:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002752:	691a      	ldr	r2, [r3, #16]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	4903      	ldr	r1, [pc, #12]	@ (8002768 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	4313      	orrs	r3, r2
 800275c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800275e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000

0800276c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e040      	b.n	8002800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe f8fa 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	@ 0x24
 8002798:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0201 	bic.w	r2, r2, #1
 80027a8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fee8 	bl	8003588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fc8b 	bl	80030d4 <UART_SetConfig>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d101      	bne.n	80027c8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e01b      	b.n	8002800 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689a      	ldr	r2, [r3, #8]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 ff67 	bl	80036cc <UART_CheckIdleState>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3708      	adds	r7, #8
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	@ 0x28
 800280c:	af02      	add	r7, sp, #8
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	4613      	mov	r3, r2
 8002816:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800281c:	2b20      	cmp	r3, #32
 800281e:	d177      	bne.n	8002910 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_UART_Transmit+0x24>
 8002826:	88fb      	ldrh	r3, [r7, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e070      	b.n	8002912 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2221      	movs	r2, #33	@ 0x21
 800283c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800283e:	f7fe fa6b 	bl	8000d18 <HAL_GetTick>
 8002842:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800285c:	d108      	bne.n	8002870 <HAL_UART_Transmit+0x68>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	61bb      	str	r3, [r7, #24]
 800286e:	e003      	b.n	8002878 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002878:	e02f      	b.n	80028da <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 ffc9 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e03b      	b.n	8002912 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	881a      	ldrh	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028ac:	b292      	uxth	r2, r2
 80028ae:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	3302      	adds	r3, #2
 80028b4:	61bb      	str	r3, [r7, #24]
 80028b6:	e007      	b.n	80028c8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	781a      	ldrb	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3301      	adds	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1c9      	bne.n	800287a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2140      	movs	r1, #64	@ 0x40
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 ff93 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e005      	b.n	8002912 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	e000      	b.n	8002912 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002910:	2302      	movs	r3, #2
  }
}
 8002912:	4618      	mov	r0, r3
 8002914:	3720      	adds	r7, #32
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b08a      	sub	sp, #40	@ 0x28
 800291e:	af02      	add	r7, sp, #8
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	603b      	str	r3, [r7, #0]
 8002926:	4613      	mov	r3, r2
 8002928:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002930:	2b20      	cmp	r3, #32
 8002932:	f040 80b6 	bne.w	8002aa2 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <HAL_UART_Receive+0x28>
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d101      	bne.n	8002946 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e0ae      	b.n	8002aa4 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2222      	movs	r2, #34	@ 0x22
 8002952:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800295c:	f7fe f9dc 	bl	8000d18 <HAL_GetTick>
 8002960:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	88fa      	ldrh	r2, [r7, #6]
 800296e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800297a:	d10e      	bne.n	800299a <HAL_UART_Receive+0x80>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_UART_Receive+0x76>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800298a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800298e:	e02d      	b.n	80029ec <HAL_UART_Receive+0xd2>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	22ff      	movs	r2, #255	@ 0xff
 8002994:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002998:	e028      	b.n	80029ec <HAL_UART_Receive+0xd2>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_UART_Receive+0xa4>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d104      	bne.n	80029b4 <HAL_UART_Receive+0x9a>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	22ff      	movs	r2, #255	@ 0xff
 80029ae:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029b2:	e01b      	b.n	80029ec <HAL_UART_Receive+0xd2>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	227f      	movs	r2, #127	@ 0x7f
 80029b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029bc:	e016      	b.n	80029ec <HAL_UART_Receive+0xd2>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029c6:	d10d      	bne.n	80029e4 <HAL_UART_Receive+0xca>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d104      	bne.n	80029da <HAL_UART_Receive+0xc0>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	227f      	movs	r2, #127	@ 0x7f
 80029d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029d8:	e008      	b.n	80029ec <HAL_UART_Receive+0xd2>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	223f      	movs	r2, #63	@ 0x3f
 80029de:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029e2:	e003      	b.n	80029ec <HAL_UART_Receive+0xd2>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80029f2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029fc:	d108      	bne.n	8002a10 <HAL_UART_Receive+0xf6>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a18:	e037      	b.n	8002a8a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2120      	movs	r1, #32
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fef9 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e033      	b.n	8002aa4 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	8a7b      	ldrh	r3, [r7, #18]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	3302      	adds	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
 8002a5a:	e00d      	b.n	8002a78 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a62:	b29b      	uxth	r3, r3
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	8a7b      	ldrh	r3, [r7, #18]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1c1      	bne.n	8002a1a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	e000      	b.n	8002aa4 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002aa2:	2302      	movs	r3, #2
  }
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3720      	adds	r7, #32
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b0ba      	sub	sp, #232	@ 0xe8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ad2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002ad6:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002ada:	4013      	ands	r3, r2
 8002adc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002ae0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d115      	bne.n	8002b14 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 82ae 	beq.w	8003066 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	4798      	blx	r3
      }
      return;
 8002b12:	e2a8      	b.n	8003066 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002b14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8117 	beq.w	8002d4c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d106      	bne.n	8002b38 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002b2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <HAL_UART_IRQHandler+0x298>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 810a 	beq.w	8002d4c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d011      	beq.n	8002b68 <HAL_UART_IRQHandler+0xbc>
 8002b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2201      	movs	r2, #1
 8002b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d011      	beq.n	8002b98 <HAL_UART_IRQHandler+0xec>
 8002b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00b      	beq.n	8002b98 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2202      	movs	r2, #2
 8002b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b8e:	f043 0204 	orr.w	r2, r3, #4
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d011      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x11c>
 8002ba4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bbe:	f043 0202 	orr.w	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bcc:	f003 0308 	and.w	r3, r3, #8
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002be4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bfa:	f043 0208 	orr.w	r2, r3, #8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d012      	beq.n	8002c36 <HAL_UART_IRQHandler+0x18a>
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c24:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 8214 	beq.w	800306a <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00d      	beq.n	8002c6a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c7e:	2b40      	cmp	r3, #64	@ 0x40
 8002c80:	d005      	beq.n	8002c8e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c86:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d04f      	beq.n	8002d2e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fef2 	bl	8003a78 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ca0:	d141      	bne.n	8002d26 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002cb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002cce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002ce6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1d9      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d013      	beq.n	8002d1e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfa:	4a13      	ldr	r2, [pc, #76]	@ (8002d48 <HAL_UART_IRQHandler+0x29c>)
 8002cfc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fe f987 	bl	8001016 <HAL_DMA_Abort_IT>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d017      	beq.n	8002d3e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d1c:	e00f      	b.n	8002d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f9c2 	bl	80030a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d24:	e00b      	b.n	8002d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f9be 	bl	80030a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	e007      	b.n	8002d3e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f9ba 	bl	80030a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002d3c:	e195      	b.n	800306a <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	bf00      	nop
    return;
 8002d40:	e193      	b.n	800306a <HAL_UART_IRQHandler+0x5be>
 8002d42:	bf00      	nop
 8002d44:	04000120 	.word	0x04000120
 8002d48:	08003b41 	.word	0x08003b41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 814e 	bne.w	8002ff2 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8147 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8140 	beq.w	8002ff2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2210      	movs	r2, #16
 8002d78:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d84:	2b40      	cmp	r3, #64	@ 0x40
 8002d86:	f040 80b8 	bne.w	8002efa <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d96:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 8167 	beq.w	800306e <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002daa:	429a      	cmp	r2, r3
 8002dac:	f080 815f 	bcs.w	800306e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002db6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 8086 	bne.w	8002ed8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002dd8:	e853 3f00 	ldrex	r3, [r3]
 8002ddc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002de4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002de8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002dfa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1da      	bne.n	8002dcc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	3308      	adds	r3, #8
 8002e1c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e20:	e853 3f00 	ldrex	r3, [r3]
 8002e24:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e28:	f023 0301 	bic.w	r3, r3, #1
 8002e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3308      	adds	r3, #8
 8002e36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e3a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e40:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e1      	bne.n	8002e16 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3308      	adds	r3, #8
 8002e58:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3308      	adds	r3, #8
 8002e72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e76:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e78:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ea8:	f023 0310 	bic.w	r3, r3, #16
 8002eac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002eba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ebc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ec0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ec8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e4      	bne.n	8002e98 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fe f861 	bl	8000f9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8e2 	bl	80030bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ef8:	e0b9      	b.n	800306e <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 80ab 	beq.w	8003072 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8002f1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a6 	beq.w	8003072 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f4a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e4      	bne.n	8002f26 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	623b      	str	r3, [r7, #32]
   return(result);
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f80:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f88:	e841 2300 	strex	r3, r2, [r1]
 8002f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1e3      	bne.n	8002f5c <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	e853 3f00 	ldrex	r3, [r3]
 8002fb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f023 0310 	bic.w	r3, r3, #16
 8002fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fca:	61fb      	str	r3, [r7, #28]
 8002fcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fce:	69b9      	ldr	r1, [r7, #24]
 8002fd0:	69fa      	ldr	r2, [r7, #28]
 8002fd2:	e841 2300 	strex	r3, r2, [r1]
 8002fd6:	617b      	str	r3, [r7, #20]
   return(result);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1e4      	bne.n	8002fa8 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002fe8:	4619      	mov	r1, r3
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f866 	bl	80030bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ff0:	e03f      	b.n	8003072 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00e      	beq.n	800301c <HAL_UART_IRQHandler+0x570>
 8002ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003012:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 ff8f 	bl	8003f38 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800301a:	e02d      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00e      	beq.n	8003046 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d01c      	beq.n	8003076 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	4798      	blx	r3
    }
    return;
 8003044:	e017      	b.n	8003076 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800304a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d012      	beq.n	8003078 <HAL_UART_IRQHandler+0x5cc>
 8003052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fd84 	bl	8003b6c <UART_EndTransmit_IT>
    return;
 8003064:	e008      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003066:	bf00      	nop
 8003068:	e006      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
    return;
 800306a:	bf00      	nop
 800306c:	e004      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
      return;
 800306e:	bf00      	nop
 8003070:	e002      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
      return;
 8003072:	bf00      	nop
 8003074:	e000      	b.n	8003078 <HAL_UART_IRQHandler+0x5cc>
    return;
 8003076:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003078:	37e8      	adds	r7, #232	@ 0xe8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop

08003080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr

080030d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030d8:	b08a      	sub	sp, #40	@ 0x28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	431a      	orrs	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	4b9e      	ldr	r3, [pc, #632]	@ (800337c <UART_SetConfig+0x2a8>)
 8003104:	4013      	ands	r3, r2
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800310c:	430b      	orrs	r3, r1
 800310e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a93      	ldr	r2, [pc, #588]	@ (8003380 <UART_SetConfig+0x2ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d004      	beq.n	8003140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313c:	4313      	orrs	r3, r2
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003150:	430a      	orrs	r2, r1
 8003152:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a8a      	ldr	r2, [pc, #552]	@ (8003384 <UART_SetConfig+0x2b0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d126      	bne.n	80031ac <UART_SetConfig+0xd8>
 800315e:	4b8a      	ldr	r3, [pc, #552]	@ (8003388 <UART_SetConfig+0x2b4>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b03      	cmp	r3, #3
 800316a:	d81b      	bhi.n	80031a4 <UART_SetConfig+0xd0>
 800316c:	a201      	add	r2, pc, #4	@ (adr r2, 8003174 <UART_SetConfig+0xa0>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	08003185 	.word	0x08003185
 8003178:	08003195 	.word	0x08003195
 800317c:	0800318d 	.word	0x0800318d
 8003180:	0800319d 	.word	0x0800319d
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e0ab      	b.n	80032e4 <UART_SetConfig+0x210>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e0a7      	b.n	80032e4 <UART_SetConfig+0x210>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e0a3      	b.n	80032e4 <UART_SetConfig+0x210>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e09f      	b.n	80032e4 <UART_SetConfig+0x210>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031aa:	e09b      	b.n	80032e4 <UART_SetConfig+0x210>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a76      	ldr	r2, [pc, #472]	@ (800338c <UART_SetConfig+0x2b8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d138      	bne.n	8003228 <UART_SetConfig+0x154>
 80031b6:	4b74      	ldr	r3, [pc, #464]	@ (8003388 <UART_SetConfig+0x2b4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d82d      	bhi.n	8003220 <UART_SetConfig+0x14c>
 80031c4:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <UART_SetConfig+0xf8>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003221 	.word	0x08003221
 80031d8:	08003221 	.word	0x08003221
 80031dc:	08003211 	.word	0x08003211
 80031e0:	08003221 	.word	0x08003221
 80031e4:	08003221 	.word	0x08003221
 80031e8:	08003221 	.word	0x08003221
 80031ec:	08003209 	.word	0x08003209
 80031f0:	08003221 	.word	0x08003221
 80031f4:	08003221 	.word	0x08003221
 80031f8:	08003221 	.word	0x08003221
 80031fc:	08003219 	.word	0x08003219
 8003200:	2300      	movs	r3, #0
 8003202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003206:	e06d      	b.n	80032e4 <UART_SetConfig+0x210>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320e:	e069      	b.n	80032e4 <UART_SetConfig+0x210>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e065      	b.n	80032e4 <UART_SetConfig+0x210>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e061      	b.n	80032e4 <UART_SetConfig+0x210>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e05d      	b.n	80032e4 <UART_SetConfig+0x210>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a58      	ldr	r2, [pc, #352]	@ (8003390 <UART_SetConfig+0x2bc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d125      	bne.n	800327e <UART_SetConfig+0x1aa>
 8003232:	4b55      	ldr	r3, [pc, #340]	@ (8003388 <UART_SetConfig+0x2b4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800323c:	2b30      	cmp	r3, #48	@ 0x30
 800323e:	d016      	beq.n	800326e <UART_SetConfig+0x19a>
 8003240:	2b30      	cmp	r3, #48	@ 0x30
 8003242:	d818      	bhi.n	8003276 <UART_SetConfig+0x1a2>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d00a      	beq.n	800325e <UART_SetConfig+0x18a>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d814      	bhi.n	8003276 <UART_SetConfig+0x1a2>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <UART_SetConfig+0x182>
 8003250:	2b10      	cmp	r3, #16
 8003252:	d008      	beq.n	8003266 <UART_SetConfig+0x192>
 8003254:	e00f      	b.n	8003276 <UART_SetConfig+0x1a2>
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325c:	e042      	b.n	80032e4 <UART_SetConfig+0x210>
 800325e:	2302      	movs	r3, #2
 8003260:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003264:	e03e      	b.n	80032e4 <UART_SetConfig+0x210>
 8003266:	2304      	movs	r3, #4
 8003268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326c:	e03a      	b.n	80032e4 <UART_SetConfig+0x210>
 800326e:	2308      	movs	r3, #8
 8003270:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003274:	e036      	b.n	80032e4 <UART_SetConfig+0x210>
 8003276:	2310      	movs	r3, #16
 8003278:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327c:	e032      	b.n	80032e4 <UART_SetConfig+0x210>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a3f      	ldr	r2, [pc, #252]	@ (8003380 <UART_SetConfig+0x2ac>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12a      	bne.n	80032de <UART_SetConfig+0x20a>
 8003288:	4b3f      	ldr	r3, [pc, #252]	@ (8003388 <UART_SetConfig+0x2b4>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003296:	d01a      	beq.n	80032ce <UART_SetConfig+0x1fa>
 8003298:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800329c:	d81b      	bhi.n	80032d6 <UART_SetConfig+0x202>
 800329e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a2:	d00c      	beq.n	80032be <UART_SetConfig+0x1ea>
 80032a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032a8:	d815      	bhi.n	80032d6 <UART_SetConfig+0x202>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <UART_SetConfig+0x1e2>
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d008      	beq.n	80032c6 <UART_SetConfig+0x1f2>
 80032b4:	e00f      	b.n	80032d6 <UART_SetConfig+0x202>
 80032b6:	2300      	movs	r3, #0
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032bc:	e012      	b.n	80032e4 <UART_SetConfig+0x210>
 80032be:	2302      	movs	r3, #2
 80032c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c4:	e00e      	b.n	80032e4 <UART_SetConfig+0x210>
 80032c6:	2304      	movs	r3, #4
 80032c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032cc:	e00a      	b.n	80032e4 <UART_SetConfig+0x210>
 80032ce:	2308      	movs	r3, #8
 80032d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d4:	e006      	b.n	80032e4 <UART_SetConfig+0x210>
 80032d6:	2310      	movs	r3, #16
 80032d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032dc:	e002      	b.n	80032e4 <UART_SetConfig+0x210>
 80032de:	2310      	movs	r3, #16
 80032e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a25      	ldr	r2, [pc, #148]	@ (8003380 <UART_SetConfig+0x2ac>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	f040 808a 	bne.w	8003404 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d824      	bhi.n	8003342 <UART_SetConfig+0x26e>
 80032f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <UART_SetConfig+0x22c>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003325 	.word	0x08003325
 8003304:	08003343 	.word	0x08003343
 8003308:	0800332d 	.word	0x0800332d
 800330c:	08003343 	.word	0x08003343
 8003310:	08003333 	.word	0x08003333
 8003314:	08003343 	.word	0x08003343
 8003318:	08003343 	.word	0x08003343
 800331c:	08003343 	.word	0x08003343
 8003320:	0800333b 	.word	0x0800333b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fe5a 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 8003328:	61f8      	str	r0, [r7, #28]
        break;
 800332a:	e010      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800332c:	4b19      	ldr	r3, [pc, #100]	@ (8003394 <UART_SetConfig+0x2c0>)
 800332e:	61fb      	str	r3, [r7, #28]
        break;
 8003330:	e00d      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003332:	f7fe fdbb 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003336:	61f8      	str	r0, [r7, #28]
        break;
 8003338:	e009      	b.n	800334e <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800333a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800333e:	61fb      	str	r3, [r7, #28]
        break;
 8003340:	e005      	b.n	800334e <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800334c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8109 	beq.w	8003568 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4413      	add	r3, r2
 8003360:	69fa      	ldr	r2, [r7, #28]
 8003362:	429a      	cmp	r2, r3
 8003364:	d305      	bcc.n	8003372 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	429a      	cmp	r2, r3
 8003370:	d912      	bls.n	8003398 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003378:	e0f6      	b.n	8003568 <UART_SetConfig+0x494>
 800337a:	bf00      	nop
 800337c:	efff69f3 	.word	0xefff69f3
 8003380:	40008000 	.word	0x40008000
 8003384:	40013800 	.word	0x40013800
 8003388:	40021000 	.word	0x40021000
 800338c:	40004400 	.word	0x40004400
 8003390:	40004800 	.word	0x40004800
 8003394:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	2200      	movs	r2, #0
 800339c:	461c      	mov	r4, r3
 800339e:	4615      	mov	r5, r2
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	022b      	lsls	r3, r5, #8
 80033aa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033ae:	0222      	lsls	r2, r4, #8
 80033b0:	68f9      	ldr	r1, [r7, #12]
 80033b2:	6849      	ldr	r1, [r1, #4]
 80033b4:	0849      	lsrs	r1, r1, #1
 80033b6:	2000      	movs	r0, #0
 80033b8:	4688      	mov	r8, r1
 80033ba:	4681      	mov	r9, r0
 80033bc:	eb12 0a08 	adds.w	sl, r2, r8
 80033c0:	eb43 0b09 	adc.w	fp, r3, r9
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033d2:	4650      	mov	r0, sl
 80033d4:	4659      	mov	r1, fp
 80033d6:	f7fc ff4b 	bl	8000270 <__aeabi_uldivmod>
 80033da:	4602      	mov	r2, r0
 80033dc:	460b      	mov	r3, r1
 80033de:	4613      	mov	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033e8:	d308      	bcc.n	80033fc <UART_SetConfig+0x328>
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033f0:	d204      	bcs.n	80033fc <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	60da      	str	r2, [r3, #12]
 80033fa:	e0b5      	b.n	8003568 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003402:	e0b1      	b.n	8003568 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	69db      	ldr	r3, [r3, #28]
 8003408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800340c:	d15d      	bne.n	80034ca <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800340e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003412:	2b08      	cmp	r3, #8
 8003414:	d827      	bhi.n	8003466 <UART_SetConfig+0x392>
 8003416:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <UART_SetConfig+0x348>)
 8003418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341c:	08003441 	.word	0x08003441
 8003420:	08003449 	.word	0x08003449
 8003424:	08003451 	.word	0x08003451
 8003428:	08003467 	.word	0x08003467
 800342c:	08003457 	.word	0x08003457
 8003430:	08003467 	.word	0x08003467
 8003434:	08003467 	.word	0x08003467
 8003438:	08003467 	.word	0x08003467
 800343c:	0800345f 	.word	0x0800345f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003440:	f7fe fdcc 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 8003444:	61f8      	str	r0, [r7, #28]
        break;
 8003446:	e014      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe fdde 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 800344c:	61f8      	str	r0, [r7, #28]
        break;
 800344e:	e010      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003450:	4b4c      	ldr	r3, [pc, #304]	@ (8003584 <UART_SetConfig+0x4b0>)
 8003452:	61fb      	str	r3, [r7, #28]
        break;
 8003454:	e00d      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003456:	f7fe fd29 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 800345a:	61f8      	str	r0, [r7, #28]
        break;
 800345c:	e009      	b.n	8003472 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800345e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003462:	61fb      	str	r3, [r7, #28]
        break;
 8003464:	e005      	b.n	8003472 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003470:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d077      	beq.n	8003568 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	005a      	lsls	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	441a      	add	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	fbb2 f3f3 	udiv	r3, r2, r3
 800348c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d916      	bls.n	80034c2 <UART_SetConfig+0x3ee>
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349a:	d212      	bcs.n	80034c2 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	b29b      	uxth	r3, r3
 80034a0:	f023 030f 	bic.w	r3, r3, #15
 80034a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	085b      	lsrs	r3, r3, #1
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	8afb      	ldrh	r3, [r7, #22]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	8afa      	ldrh	r2, [r7, #22]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e052      	b.n	8003568 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034c8:	e04e      	b.n	8003568 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d827      	bhi.n	8003522 <UART_SetConfig+0x44e>
 80034d2:	a201      	add	r2, pc, #4	@ (adr r2, 80034d8 <UART_SetConfig+0x404>)
 80034d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034d8:	080034fd 	.word	0x080034fd
 80034dc:	08003505 	.word	0x08003505
 80034e0:	0800350d 	.word	0x0800350d
 80034e4:	08003523 	.word	0x08003523
 80034e8:	08003513 	.word	0x08003513
 80034ec:	08003523 	.word	0x08003523
 80034f0:	08003523 	.word	0x08003523
 80034f4:	08003523 	.word	0x08003523
 80034f8:	0800351b 	.word	0x0800351b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034fc:	f7fe fd6e 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 8003500:	61f8      	str	r0, [r7, #28]
        break;
 8003502:	e014      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003504:	f7fe fd80 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8003508:	61f8      	str	r0, [r7, #28]
        break;
 800350a:	e010      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800350c:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <UART_SetConfig+0x4b0>)
 800350e:	61fb      	str	r3, [r7, #28]
        break;
 8003510:	e00d      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003512:	f7fe fccb 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8003516:	61f8      	str	r0, [r7, #28]
        break;
 8003518:	e009      	b.n	800352e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800351e:	61fb      	str	r3, [r7, #28]
        break;
 8003520:	e005      	b.n	800352e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800352c:	bf00      	nop
    }

    if (pclk != 0U)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	085a      	lsrs	r2, r3, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	441a      	add	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	fbb2 f3f3 	udiv	r3, r2, r3
 8003546:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0f      	cmp	r3, #15
 800354c:	d909      	bls.n	8003562 <UART_SetConfig+0x48e>
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003554:	d205      	bcs.n	8003562 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
 8003560:	e002      	b.n	8003568 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003574:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003578:	4618      	mov	r0, r3
 800357a:	3728      	adds	r7, #40	@ 0x28
 800357c:	46bd      	mov	sp, r7
 800357e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003582:	bf00      	nop
 8003584:	00f42400 	.word	0x00f42400

08003588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00a      	beq.n	80035b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f003 0302 	and.w	r3, r3, #2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361c:	f003 0310 	and.w	r3, r3, #16
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00a      	beq.n	800363a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003664:	2b00      	cmp	r3, #0
 8003666:	d01a      	beq.n	800369e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003686:	d10a      	bne.n	800369e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b098      	sub	sp, #96	@ 0x60
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036dc:	f7fd fb1c 	bl	8000d18 <HAL_GetTick>
 80036e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d12e      	bne.n	800374e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f88c 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800371a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	461a      	mov	r2, r3
 8003726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003728:	647b      	str	r3, [r7, #68]	@ 0x44
 800372a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800372e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e6      	bne.n	800370a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e062      	b.n	8003814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b04      	cmp	r3, #4
 800375a:	d149      	bne.n	80037f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003764:	2200      	movs	r2, #0
 8003766:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f856 	bl	800381c <UART_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d03c      	beq.n	80037f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	623b      	str	r3, [r7, #32]
   return(result);
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800378a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	461a      	mov	r2, r3
 8003792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003794:	633b      	str	r3, [r7, #48]	@ 0x30
 8003796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800379a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e6      	bne.n	8003776 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3308      	adds	r3, #8
 80037ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3308      	adds	r3, #8
 80037c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037c8:	61fa      	str	r2, [r7, #28]
 80037ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	69b9      	ldr	r1, [r7, #24]
 80037ce:	69fa      	ldr	r2, [r7, #28]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	617b      	str	r3, [r7, #20]
   return(result);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2220      	movs	r2, #32
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e011      	b.n	8003814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3758      	adds	r7, #88	@ 0x58
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	4613      	mov	r3, r2
 800382a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382c:	e049      	b.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d045      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fd fa6f 	bl	8000d18 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <UART_WaitOnFlagUntilTimeout+0x30>
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e048      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d031      	beq.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	f003 0308 	and.w	r3, r3, #8
 8003868:	2b08      	cmp	r3, #8
 800386a:	d110      	bne.n	800388e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2208      	movs	r2, #8
 8003872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 f8ff 	bl	8003a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2208      	movs	r2, #8
 800387e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e029      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800389c:	d111      	bne.n	80038c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 f8e5 	bl	8003a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e00f      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	bf0c      	ite	eq
 80038d2:	2301      	moveq	r3, #1
 80038d4:	2300      	movne	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d0a6      	beq.n	800382e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b097      	sub	sp, #92	@ 0x5c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	4613      	mov	r3, r2
 80038f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800391e:	d10e      	bne.n	800393e <UART_Start_Receive_IT+0x52>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <UART_Start_Receive_IT+0x48>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800392e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003932:	e02d      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	22ff      	movs	r2, #255	@ 0xff
 8003938:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800393c:	e028      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d10d      	bne.n	8003962 <UART_Start_Receive_IT+0x76>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d104      	bne.n	8003958 <UART_Start_Receive_IT+0x6c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	22ff      	movs	r2, #255	@ 0xff
 8003952:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003956:	e01b      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	227f      	movs	r2, #127	@ 0x7f
 800395c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003960:	e016      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800396a:	d10d      	bne.n	8003988 <UART_Start_Receive_IT+0x9c>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <UART_Start_Receive_IT+0x92>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	227f      	movs	r2, #127	@ 0x7f
 8003978:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800397c:	e008      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	223f      	movs	r2, #63	@ 0x3f
 8003982:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003986:	e003      	b.n	8003990 <UART_Start_Receive_IT+0xa4>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2222      	movs	r2, #34	@ 0x22
 800399c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039aa:	e853 3f00 	ldrex	r3, [r3]
 80039ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3308      	adds	r3, #8
 80039be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039c0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80039c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80039ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e5      	bne.n	80039a0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039dc:	d107      	bne.n	80039ee <UART_Start_Receive_IT+0x102>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a21      	ldr	r2, [pc, #132]	@ (8003a70 <UART_Start_Receive_IT+0x184>)
 80039ea:	669a      	str	r2, [r3, #104]	@ 0x68
 80039ec:	e002      	b.n	80039f4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4a20      	ldr	r2, [pc, #128]	@ (8003a74 <UART_Start_Receive_IT+0x188>)
 80039f2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d019      	beq.n	8003a30 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	e853 3f00 	ldrex	r3, [r3]
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003a10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a1c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a22:	e841 2300 	strex	r3, r2, [r1]
 8003a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1e6      	bne.n	80039fc <UART_Start_Receive_IT+0x110>
 8003a2e:	e018      	b.n	8003a62 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f043 0320 	orr.w	r3, r3, #32
 8003a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4e:	623b      	str	r3, [r7, #32]
 8003a50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	69f9      	ldr	r1, [r7, #28]
 8003a54:	6a3a      	ldr	r2, [r7, #32]
 8003a56:	e841 2300 	strex	r3, r2, [r1]
 8003a5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1e6      	bne.n	8003a30 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	375c      	adds	r7, #92	@ 0x5c
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	08003d7d 	.word	0x08003d7d
 8003a74:	08003bc1 	.word	0x08003bc1

08003a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b095      	sub	sp, #84	@ 0x54
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3308      	adds	r3, #8
 8003ad0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ada:	e841 2300 	strex	r3, r2, [r1]
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1e5      	bne.n	8003ab2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d118      	bne.n	8003b20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	461a      	mov	r2, r3
 8003b0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6979      	ldr	r1, [r7, #20]
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e6      	bne.n	8003aee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b34:	bf00      	nop
 8003b36:	3754      	adds	r7, #84	@ 0x54
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7ff faa2 	bl	80030a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	e853 3f00 	ldrex	r3, [r3]
 8003b80:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	61bb      	str	r3, [r7, #24]
 8003b94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b96:	6979      	ldr	r1, [r7, #20]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	e841 2300 	strex	r3, r2, [r1]
 8003b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e6      	bne.n	8003b74 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fa64 	bl	8003080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bb8:	bf00      	nop
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b09c      	sub	sp, #112	@ 0x70
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd8:	2b22      	cmp	r3, #34	@ 0x22
 8003bda:	f040 80be 	bne.w	8003d5a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003be4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003bec:	b2d9      	uxtb	r1, r3
 8003bee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80a3 	bne.w	8003d6e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a34      	ldr	r2, [pc, #208]	@ (8003d78 <UART_RxISR_8BIT+0x1b8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01f      	beq.n	8003cec <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d018      	beq.n	8003cec <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	e853 3f00 	ldrex	r3, [r3]
 8003cc6:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003cce:	663b      	str	r3, [r7, #96]	@ 0x60
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e6      	bne.n	8003cba <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d12e      	bne.n	8003d52 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	69b9      	ldr	r1, [r7, #24]
 8003d1e:	69fa      	ldr	r2, [r7, #28]
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	617b      	str	r3, [r7, #20]
   return(result);
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e6      	bne.n	8003cfa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	2b10      	cmp	r3, #16
 8003d38:	d103      	bne.n	8003d42 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2210      	movs	r2, #16
 8003d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff f9b6 	bl	80030bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d50:	e00d      	b.n	8003d6e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff f99e 	bl	8003094 <HAL_UART_RxCpltCallback>
}
 8003d58:	e009      	b.n	8003d6e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	8b1b      	ldrh	r3, [r3, #24]
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	831a      	strh	r2, [r3, #24]
}
 8003d6e:	bf00      	nop
 8003d70:	3770      	adds	r7, #112	@ 0x70
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40008000 	.word	0x40008000

08003d7c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b09c      	sub	sp, #112	@ 0x70
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d8a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d94:	2b22      	cmp	r3, #34	@ 0x22
 8003d96:	f040 80be 	bne.w	8003f16 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003da0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003daa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003dae:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003db2:	4013      	ands	r3, r2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003db8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbe:	1c9a      	adds	r2, r3, #2
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f040 80a3 	bne.w	8003f2a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003df2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003df4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003df8:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e02:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e04:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003e08:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003e10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e6      	bne.n	8003de4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e20:	e853 3f00 	ldrex	r3, [r3]
 8003e24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	3308      	adds	r3, #8
 8003e34:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003e36:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e3e:	e841 2300 	strex	r3, r2, [r1]
 8003e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1e5      	bne.n	8003e16 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a34      	ldr	r2, [pc, #208]	@ (8003f34 <UART_RxISR_16BIT+0x1b8>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01f      	beq.n	8003ea8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d018      	beq.n	8003ea8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	e853 3f00 	ldrex	r3, [r3]
 8003e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e96:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e9c:	e841 2300 	strex	r3, r2, [r1]
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1e6      	bne.n	8003e76 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12e      	bne.n	8003f0e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0310 	bic.w	r3, r3, #16
 8003eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b10      	cmp	r3, #16
 8003ef4:	d103      	bne.n	8003efe <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2210      	movs	r2, #16
 8003efc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f04:	4619      	mov	r1, r3
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff f8d8 	bl	80030bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f0c:	e00d      	b.n	8003f2a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff f8c0 	bl	8003094 <HAL_UART_RxCpltCallback>
}
 8003f14:	e009      	b.n	8003f2a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	8b1b      	ldrh	r3, [r3, #24]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f042 0208 	orr.w	r2, r2, #8
 8003f26:	b292      	uxth	r2, r2
 8003f28:	831a      	strh	r2, [r3, #24]
}
 8003f2a:	bf00      	nop
 8003f2c:	3770      	adds	r7, #112	@ 0x70
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40008000 	.word	0x40008000

08003f38 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08c      	sub	sp, #48	@ 0x30
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f66:	2b20      	cmp	r3, #32
 8003f68:	d13b      	bne.n	8003fe2 <HAL_UARTEx_ReceiveToIdle_IT+0x96>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e034      	b.n	8003fe4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	665a      	str	r2, [r3, #100]	@ 0x64

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f7ff fcad 	bl	80038ec <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d11d      	bne.n	8003fd6 <HAL_UARTEx_ReceiveToIdle_IT+0x8a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2210      	movs	r2, #16
 8003fa0:	621a      	str	r2, [r3, #32]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f043 0310 	orr.w	r3, r3, #16
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6a39      	ldr	r1, [r7, #32]
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e6      	bne.n	8003fa2 <HAL_UARTEx_ReceiveToIdle_IT+0x56>
 8003fd4:	e002      	b.n	8003fdc <HAL_UARTEx_ReceiveToIdle_IT+0x90>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003fdc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003fe0:	e000      	b.n	8003fe4 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
  }
  else
  {
    return HAL_BUSY;
 8003fe2:	2302      	movs	r3, #2
  }
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3730      	adds	r7, #48	@ 0x30
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <std>:
 8003fec:	2300      	movs	r3, #0
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ffa:	6083      	str	r3, [r0, #8]
 8003ffc:	8181      	strh	r1, [r0, #12]
 8003ffe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004000:	81c2      	strh	r2, [r0, #14]
 8004002:	6183      	str	r3, [r0, #24]
 8004004:	4619      	mov	r1, r3
 8004006:	2208      	movs	r2, #8
 8004008:	305c      	adds	r0, #92	@ 0x5c
 800400a:	f000 fa01 	bl	8004410 <memset>
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <std+0x58>)
 8004010:	6263      	str	r3, [r4, #36]	@ 0x24
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <std+0x5c>)
 8004014:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <std+0x60>)
 8004018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <std+0x64>)
 800401c:	6323      	str	r3, [r4, #48]	@ 0x30
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <std+0x68>)
 8004020:	6224      	str	r4, [r4, #32]
 8004022:	429c      	cmp	r4, r3
 8004024:	d006      	beq.n	8004034 <std+0x48>
 8004026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800402a:	4294      	cmp	r4, r2
 800402c:	d002      	beq.n	8004034 <std+0x48>
 800402e:	33d0      	adds	r3, #208	@ 0xd0
 8004030:	429c      	cmp	r4, r3
 8004032:	d105      	bne.n	8004040 <std+0x54>
 8004034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403c:	f000 ba60 	b.w	8004500 <__retarget_lock_init_recursive>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	08004261 	.word	0x08004261
 8004048:	08004283 	.word	0x08004283
 800404c:	080042bb 	.word	0x080042bb
 8004050:	080042df 	.word	0x080042df
 8004054:	2000013c 	.word	0x2000013c

08004058 <stdio_exit_handler>:
 8004058:	4a02      	ldr	r2, [pc, #8]	@ (8004064 <stdio_exit_handler+0xc>)
 800405a:	4903      	ldr	r1, [pc, #12]	@ (8004068 <stdio_exit_handler+0x10>)
 800405c:	4803      	ldr	r0, [pc, #12]	@ (800406c <stdio_exit_handler+0x14>)
 800405e:	f000 b869 	b.w	8004134 <_fwalk_sglue>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	08004da1 	.word	0x08004da1
 800406c:	2000001c 	.word	0x2000001c

08004070 <cleanup_stdio>:
 8004070:	6841      	ldr	r1, [r0, #4]
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <cleanup_stdio+0x34>)
 8004074:	4299      	cmp	r1, r3
 8004076:	b510      	push	{r4, lr}
 8004078:	4604      	mov	r4, r0
 800407a:	d001      	beq.n	8004080 <cleanup_stdio+0x10>
 800407c:	f000 fe90 	bl	8004da0 <_fflush_r>
 8004080:	68a1      	ldr	r1, [r4, #8]
 8004082:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <cleanup_stdio+0x38>)
 8004084:	4299      	cmp	r1, r3
 8004086:	d002      	beq.n	800408e <cleanup_stdio+0x1e>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 fe89 	bl	8004da0 <_fflush_r>
 800408e:	68e1      	ldr	r1, [r4, #12]
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <cleanup_stdio+0x3c>)
 8004092:	4299      	cmp	r1, r3
 8004094:	d004      	beq.n	80040a0 <cleanup_stdio+0x30>
 8004096:	4620      	mov	r0, r4
 8004098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800409c:	f000 be80 	b.w	8004da0 <_fflush_r>
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	2000013c 	.word	0x2000013c
 80040a8:	200001a4 	.word	0x200001a4
 80040ac:	2000020c 	.word	0x2000020c

080040b0 <global_stdio_init.part.0>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <global_stdio_init.part.0+0x30>)
 80040b4:	4c0b      	ldr	r4, [pc, #44]	@ (80040e4 <global_stdio_init.part.0+0x34>)
 80040b6:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <global_stdio_init.part.0+0x38>)
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4620      	mov	r0, r4
 80040bc:	2200      	movs	r2, #0
 80040be:	2104      	movs	r1, #4
 80040c0:	f7ff ff94 	bl	8003fec <std>
 80040c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040c8:	2201      	movs	r2, #1
 80040ca:	2109      	movs	r1, #9
 80040cc:	f7ff ff8e 	bl	8003fec <std>
 80040d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040d4:	2202      	movs	r2, #2
 80040d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040da:	2112      	movs	r1, #18
 80040dc:	f7ff bf86 	b.w	8003fec <std>
 80040e0:	20000274 	.word	0x20000274
 80040e4:	2000013c 	.word	0x2000013c
 80040e8:	08004059 	.word	0x08004059

080040ec <__sfp_lock_acquire>:
 80040ec:	4801      	ldr	r0, [pc, #4]	@ (80040f4 <__sfp_lock_acquire+0x8>)
 80040ee:	f000 ba08 	b.w	8004502 <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	2000027d 	.word	0x2000027d

080040f8 <__sfp_lock_release>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__sfp_lock_release+0x8>)
 80040fa:	f000 ba03 	b.w	8004504 <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	2000027d 	.word	0x2000027d

08004104 <__sinit>:
 8004104:	b510      	push	{r4, lr}
 8004106:	4604      	mov	r4, r0
 8004108:	f7ff fff0 	bl	80040ec <__sfp_lock_acquire>
 800410c:	6a23      	ldr	r3, [r4, #32]
 800410e:	b11b      	cbz	r3, 8004118 <__sinit+0x14>
 8004110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004114:	f7ff bff0 	b.w	80040f8 <__sfp_lock_release>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__sinit+0x28>)
 800411a:	6223      	str	r3, [r4, #32]
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <__sinit+0x2c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f5      	bne.n	8004110 <__sinit+0xc>
 8004124:	f7ff ffc4 	bl	80040b0 <global_stdio_init.part.0>
 8004128:	e7f2      	b.n	8004110 <__sinit+0xc>
 800412a:	bf00      	nop
 800412c:	08004071 	.word	0x08004071
 8004130:	20000274 	.word	0x20000274

08004134 <_fwalk_sglue>:
 8004134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004138:	4607      	mov	r7, r0
 800413a:	4688      	mov	r8, r1
 800413c:	4614      	mov	r4, r2
 800413e:	2600      	movs	r6, #0
 8004140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004144:	f1b9 0901 	subs.w	r9, r9, #1
 8004148:	d505      	bpl.n	8004156 <_fwalk_sglue+0x22>
 800414a:	6824      	ldr	r4, [r4, #0]
 800414c:	2c00      	cmp	r4, #0
 800414e:	d1f7      	bne.n	8004140 <_fwalk_sglue+0xc>
 8004150:	4630      	mov	r0, r6
 8004152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d907      	bls.n	800416c <_fwalk_sglue+0x38>
 800415c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004160:	3301      	adds	r3, #1
 8004162:	d003      	beq.n	800416c <_fwalk_sglue+0x38>
 8004164:	4629      	mov	r1, r5
 8004166:	4638      	mov	r0, r7
 8004168:	47c0      	blx	r8
 800416a:	4306      	orrs	r6, r0
 800416c:	3568      	adds	r5, #104	@ 0x68
 800416e:	e7e9      	b.n	8004144 <_fwalk_sglue+0x10>

08004170 <iprintf>:
 8004170:	b40f      	push	{r0, r1, r2, r3}
 8004172:	b507      	push	{r0, r1, r2, lr}
 8004174:	4906      	ldr	r1, [pc, #24]	@ (8004190 <iprintf+0x20>)
 8004176:	ab04      	add	r3, sp, #16
 8004178:	6808      	ldr	r0, [r1, #0]
 800417a:	f853 2b04 	ldr.w	r2, [r3], #4
 800417e:	6881      	ldr	r1, [r0, #8]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	f000 fae3 	bl	800474c <_vfiprintf_r>
 8004186:	b003      	add	sp, #12
 8004188:	f85d eb04 	ldr.w	lr, [sp], #4
 800418c:	b004      	add	sp, #16
 800418e:	4770      	bx	lr
 8004190:	20000018 	.word	0x20000018

08004194 <putchar>:
 8004194:	4b02      	ldr	r3, [pc, #8]	@ (80041a0 <putchar+0xc>)
 8004196:	4601      	mov	r1, r0
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	6882      	ldr	r2, [r0, #8]
 800419c:	f000 be8a 	b.w	8004eb4 <_putc_r>
 80041a0:	20000018 	.word	0x20000018

080041a4 <_puts_r>:
 80041a4:	6a03      	ldr	r3, [r0, #32]
 80041a6:	b570      	push	{r4, r5, r6, lr}
 80041a8:	6884      	ldr	r4, [r0, #8]
 80041aa:	4605      	mov	r5, r0
 80041ac:	460e      	mov	r6, r1
 80041ae:	b90b      	cbnz	r3, 80041b4 <_puts_r+0x10>
 80041b0:	f7ff ffa8 	bl	8004104 <__sinit>
 80041b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041b6:	07db      	lsls	r3, r3, #31
 80041b8:	d405      	bmi.n	80041c6 <_puts_r+0x22>
 80041ba:	89a3      	ldrh	r3, [r4, #12]
 80041bc:	0598      	lsls	r0, r3, #22
 80041be:	d402      	bmi.n	80041c6 <_puts_r+0x22>
 80041c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041c2:	f000 f99e 	bl	8004502 <__retarget_lock_acquire_recursive>
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	0719      	lsls	r1, r3, #28
 80041ca:	d502      	bpl.n	80041d2 <_puts_r+0x2e>
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d135      	bne.n	800423e <_puts_r+0x9a>
 80041d2:	4621      	mov	r1, r4
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f8c5 	bl	8004364 <__swsetup_r>
 80041da:	b380      	cbz	r0, 800423e <_puts_r+0x9a>
 80041dc:	f04f 35ff 	mov.w	r5, #4294967295
 80041e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041e2:	07da      	lsls	r2, r3, #31
 80041e4:	d405      	bmi.n	80041f2 <_puts_r+0x4e>
 80041e6:	89a3      	ldrh	r3, [r4, #12]
 80041e8:	059b      	lsls	r3, r3, #22
 80041ea:	d402      	bmi.n	80041f2 <_puts_r+0x4e>
 80041ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ee:	f000 f989 	bl	8004504 <__retarget_lock_release_recursive>
 80041f2:	4628      	mov	r0, r5
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da04      	bge.n	8004204 <_puts_r+0x60>
 80041fa:	69a2      	ldr	r2, [r4, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	dc17      	bgt.n	8004230 <_puts_r+0x8c>
 8004200:	290a      	cmp	r1, #10
 8004202:	d015      	beq.n	8004230 <_puts_r+0x8c>
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6022      	str	r2, [r4, #0]
 800420a:	7019      	strb	r1, [r3, #0]
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004212:	3b01      	subs	r3, #1
 8004214:	60a3      	str	r3, [r4, #8]
 8004216:	2900      	cmp	r1, #0
 8004218:	d1ed      	bne.n	80041f6 <_puts_r+0x52>
 800421a:	2b00      	cmp	r3, #0
 800421c:	da11      	bge.n	8004242 <_puts_r+0x9e>
 800421e:	4622      	mov	r2, r4
 8004220:	210a      	movs	r1, #10
 8004222:	4628      	mov	r0, r5
 8004224:	f000 f85f 	bl	80042e6 <__swbuf_r>
 8004228:	3001      	adds	r0, #1
 800422a:	d0d7      	beq.n	80041dc <_puts_r+0x38>
 800422c:	250a      	movs	r5, #10
 800422e:	e7d7      	b.n	80041e0 <_puts_r+0x3c>
 8004230:	4622      	mov	r2, r4
 8004232:	4628      	mov	r0, r5
 8004234:	f000 f857 	bl	80042e6 <__swbuf_r>
 8004238:	3001      	adds	r0, #1
 800423a:	d1e7      	bne.n	800420c <_puts_r+0x68>
 800423c:	e7ce      	b.n	80041dc <_puts_r+0x38>
 800423e:	3e01      	subs	r6, #1
 8004240:	e7e4      	b.n	800420c <_puts_r+0x68>
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	6022      	str	r2, [r4, #0]
 8004248:	220a      	movs	r2, #10
 800424a:	701a      	strb	r2, [r3, #0]
 800424c:	e7ee      	b.n	800422c <_puts_r+0x88>
	...

08004250 <puts>:
 8004250:	4b02      	ldr	r3, [pc, #8]	@ (800425c <puts+0xc>)
 8004252:	4601      	mov	r1, r0
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	f7ff bfa5 	b.w	80041a4 <_puts_r>
 800425a:	bf00      	nop
 800425c:	20000018 	.word	0x20000018

08004260 <__sread>:
 8004260:	b510      	push	{r4, lr}
 8004262:	460c      	mov	r4, r1
 8004264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004268:	f000 f8fc 	bl	8004464 <_read_r>
 800426c:	2800      	cmp	r0, #0
 800426e:	bfab      	itete	ge
 8004270:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004272:	89a3      	ldrhlt	r3, [r4, #12]
 8004274:	181b      	addge	r3, r3, r0
 8004276:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800427a:	bfac      	ite	ge
 800427c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800427e:	81a3      	strhlt	r3, [r4, #12]
 8004280:	bd10      	pop	{r4, pc}

08004282 <__swrite>:
 8004282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004286:	461f      	mov	r7, r3
 8004288:	898b      	ldrh	r3, [r1, #12]
 800428a:	05db      	lsls	r3, r3, #23
 800428c:	4605      	mov	r5, r0
 800428e:	460c      	mov	r4, r1
 8004290:	4616      	mov	r6, r2
 8004292:	d505      	bpl.n	80042a0 <__swrite+0x1e>
 8004294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004298:	2302      	movs	r3, #2
 800429a:	2200      	movs	r2, #0
 800429c:	f000 f8d0 	bl	8004440 <_lseek_r>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	4632      	mov	r2, r6
 80042ae:	463b      	mov	r3, r7
 80042b0:	4628      	mov	r0, r5
 80042b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042b6:	f000 b8e7 	b.w	8004488 <_write_r>

080042ba <__sseek>:
 80042ba:	b510      	push	{r4, lr}
 80042bc:	460c      	mov	r4, r1
 80042be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c2:	f000 f8bd 	bl	8004440 <_lseek_r>
 80042c6:	1c43      	adds	r3, r0, #1
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	bf15      	itete	ne
 80042cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80042ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80042d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042d6:	81a3      	strheq	r3, [r4, #12]
 80042d8:	bf18      	it	ne
 80042da:	81a3      	strhne	r3, [r4, #12]
 80042dc:	bd10      	pop	{r4, pc}

080042de <__sclose>:
 80042de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042e2:	f000 b89d 	b.w	8004420 <_close_r>

080042e6 <__swbuf_r>:
 80042e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e8:	460e      	mov	r6, r1
 80042ea:	4614      	mov	r4, r2
 80042ec:	4605      	mov	r5, r0
 80042ee:	b118      	cbz	r0, 80042f8 <__swbuf_r+0x12>
 80042f0:	6a03      	ldr	r3, [r0, #32]
 80042f2:	b90b      	cbnz	r3, 80042f8 <__swbuf_r+0x12>
 80042f4:	f7ff ff06 	bl	8004104 <__sinit>
 80042f8:	69a3      	ldr	r3, [r4, #24]
 80042fa:	60a3      	str	r3, [r4, #8]
 80042fc:	89a3      	ldrh	r3, [r4, #12]
 80042fe:	071a      	lsls	r2, r3, #28
 8004300:	d501      	bpl.n	8004306 <__swbuf_r+0x20>
 8004302:	6923      	ldr	r3, [r4, #16]
 8004304:	b943      	cbnz	r3, 8004318 <__swbuf_r+0x32>
 8004306:	4621      	mov	r1, r4
 8004308:	4628      	mov	r0, r5
 800430a:	f000 f82b 	bl	8004364 <__swsetup_r>
 800430e:	b118      	cbz	r0, 8004318 <__swbuf_r+0x32>
 8004310:	f04f 37ff 	mov.w	r7, #4294967295
 8004314:	4638      	mov	r0, r7
 8004316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	6922      	ldr	r2, [r4, #16]
 800431c:	1a98      	subs	r0, r3, r2
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	b2f6      	uxtb	r6, r6
 8004322:	4283      	cmp	r3, r0
 8004324:	4637      	mov	r7, r6
 8004326:	dc05      	bgt.n	8004334 <__swbuf_r+0x4e>
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 fd38 	bl	8004da0 <_fflush_r>
 8004330:	2800      	cmp	r0, #0
 8004332:	d1ed      	bne.n	8004310 <__swbuf_r+0x2a>
 8004334:	68a3      	ldr	r3, [r4, #8]
 8004336:	3b01      	subs	r3, #1
 8004338:	60a3      	str	r3, [r4, #8]
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	1c5a      	adds	r2, r3, #1
 800433e:	6022      	str	r2, [r4, #0]
 8004340:	701e      	strb	r6, [r3, #0]
 8004342:	6962      	ldr	r2, [r4, #20]
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	429a      	cmp	r2, r3
 8004348:	d004      	beq.n	8004354 <__swbuf_r+0x6e>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	07db      	lsls	r3, r3, #31
 800434e:	d5e1      	bpl.n	8004314 <__swbuf_r+0x2e>
 8004350:	2e0a      	cmp	r6, #10
 8004352:	d1df      	bne.n	8004314 <__swbuf_r+0x2e>
 8004354:	4621      	mov	r1, r4
 8004356:	4628      	mov	r0, r5
 8004358:	f000 fd22 	bl	8004da0 <_fflush_r>
 800435c:	2800      	cmp	r0, #0
 800435e:	d0d9      	beq.n	8004314 <__swbuf_r+0x2e>
 8004360:	e7d6      	b.n	8004310 <__swbuf_r+0x2a>
	...

08004364 <__swsetup_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4b29      	ldr	r3, [pc, #164]	@ (800440c <__swsetup_r+0xa8>)
 8004368:	4605      	mov	r5, r0
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	460c      	mov	r4, r1
 800436e:	b118      	cbz	r0, 8004378 <__swsetup_r+0x14>
 8004370:	6a03      	ldr	r3, [r0, #32]
 8004372:	b90b      	cbnz	r3, 8004378 <__swsetup_r+0x14>
 8004374:	f7ff fec6 	bl	8004104 <__sinit>
 8004378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437c:	0719      	lsls	r1, r3, #28
 800437e:	d422      	bmi.n	80043c6 <__swsetup_r+0x62>
 8004380:	06da      	lsls	r2, r3, #27
 8004382:	d407      	bmi.n	8004394 <__swsetup_r+0x30>
 8004384:	2209      	movs	r2, #9
 8004386:	602a      	str	r2, [r5, #0]
 8004388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	f04f 30ff 	mov.w	r0, #4294967295
 8004392:	e033      	b.n	80043fc <__swsetup_r+0x98>
 8004394:	0758      	lsls	r0, r3, #29
 8004396:	d512      	bpl.n	80043be <__swsetup_r+0x5a>
 8004398:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800439a:	b141      	cbz	r1, 80043ae <__swsetup_r+0x4a>
 800439c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d002      	beq.n	80043aa <__swsetup_r+0x46>
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 f8af 	bl	8004508 <_free_r>
 80043aa:	2300      	movs	r3, #0
 80043ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80043ae:	89a3      	ldrh	r3, [r4, #12]
 80043b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80043b4:	81a3      	strh	r3, [r4, #12]
 80043b6:	2300      	movs	r3, #0
 80043b8:	6063      	str	r3, [r4, #4]
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	89a3      	ldrh	r3, [r4, #12]
 80043c0:	f043 0308 	orr.w	r3, r3, #8
 80043c4:	81a3      	strh	r3, [r4, #12]
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	b94b      	cbnz	r3, 80043de <__swsetup_r+0x7a>
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043d4:	d003      	beq.n	80043de <__swsetup_r+0x7a>
 80043d6:	4621      	mov	r1, r4
 80043d8:	4628      	mov	r0, r5
 80043da:	f000 fd2f 	bl	8004e3c <__smakebuf_r>
 80043de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043e2:	f013 0201 	ands.w	r2, r3, #1
 80043e6:	d00a      	beq.n	80043fe <__swsetup_r+0x9a>
 80043e8:	2200      	movs	r2, #0
 80043ea:	60a2      	str	r2, [r4, #8]
 80043ec:	6962      	ldr	r2, [r4, #20]
 80043ee:	4252      	negs	r2, r2
 80043f0:	61a2      	str	r2, [r4, #24]
 80043f2:	6922      	ldr	r2, [r4, #16]
 80043f4:	b942      	cbnz	r2, 8004408 <__swsetup_r+0xa4>
 80043f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80043fa:	d1c5      	bne.n	8004388 <__swsetup_r+0x24>
 80043fc:	bd38      	pop	{r3, r4, r5, pc}
 80043fe:	0799      	lsls	r1, r3, #30
 8004400:	bf58      	it	pl
 8004402:	6962      	ldrpl	r2, [r4, #20]
 8004404:	60a2      	str	r2, [r4, #8]
 8004406:	e7f4      	b.n	80043f2 <__swsetup_r+0x8e>
 8004408:	2000      	movs	r0, #0
 800440a:	e7f7      	b.n	80043fc <__swsetup_r+0x98>
 800440c:	20000018 	.word	0x20000018

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <_close_r>:
 8004420:	b538      	push	{r3, r4, r5, lr}
 8004422:	4d06      	ldr	r5, [pc, #24]	@ (800443c <_close_r+0x1c>)
 8004424:	2300      	movs	r3, #0
 8004426:	4604      	mov	r4, r0
 8004428:	4608      	mov	r0, r1
 800442a:	602b      	str	r3, [r5, #0]
 800442c:	f7fc fb65 	bl	8000afa <_close>
 8004430:	1c43      	adds	r3, r0, #1
 8004432:	d102      	bne.n	800443a <_close_r+0x1a>
 8004434:	682b      	ldr	r3, [r5, #0]
 8004436:	b103      	cbz	r3, 800443a <_close_r+0x1a>
 8004438:	6023      	str	r3, [r4, #0]
 800443a:	bd38      	pop	{r3, r4, r5, pc}
 800443c:	20000278 	.word	0x20000278

08004440 <_lseek_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	4d07      	ldr	r5, [pc, #28]	@ (8004460 <_lseek_r+0x20>)
 8004444:	4604      	mov	r4, r0
 8004446:	4608      	mov	r0, r1
 8004448:	4611      	mov	r1, r2
 800444a:	2200      	movs	r2, #0
 800444c:	602a      	str	r2, [r5, #0]
 800444e:	461a      	mov	r2, r3
 8004450:	f7fc fb7a 	bl	8000b48 <_lseek>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	d102      	bne.n	800445e <_lseek_r+0x1e>
 8004458:	682b      	ldr	r3, [r5, #0]
 800445a:	b103      	cbz	r3, 800445e <_lseek_r+0x1e>
 800445c:	6023      	str	r3, [r4, #0]
 800445e:	bd38      	pop	{r3, r4, r5, pc}
 8004460:	20000278 	.word	0x20000278

08004464 <_read_r>:
 8004464:	b538      	push	{r3, r4, r5, lr}
 8004466:	4d07      	ldr	r5, [pc, #28]	@ (8004484 <_read_r+0x20>)
 8004468:	4604      	mov	r4, r0
 800446a:	4608      	mov	r0, r1
 800446c:	4611      	mov	r1, r2
 800446e:	2200      	movs	r2, #0
 8004470:	602a      	str	r2, [r5, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	f7fc fb24 	bl	8000ac0 <_read>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d102      	bne.n	8004482 <_read_r+0x1e>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	b103      	cbz	r3, 8004482 <_read_r+0x1e>
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	bd38      	pop	{r3, r4, r5, pc}
 8004484:	20000278 	.word	0x20000278

08004488 <_write_r>:
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4d07      	ldr	r5, [pc, #28]	@ (80044a8 <_write_r+0x20>)
 800448c:	4604      	mov	r4, r0
 800448e:	4608      	mov	r0, r1
 8004490:	4611      	mov	r1, r2
 8004492:	2200      	movs	r2, #0
 8004494:	602a      	str	r2, [r5, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	f7fc f889 	bl	80005ae <_write>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_write_r+0x1e>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_write_r+0x1e>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	20000278 	.word	0x20000278

080044ac <__errno>:
 80044ac:	4b01      	ldr	r3, [pc, #4]	@ (80044b4 <__errno+0x8>)
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000018 	.word	0x20000018

080044b8 <__libc_init_array>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4d0d      	ldr	r5, [pc, #52]	@ (80044f0 <__libc_init_array+0x38>)
 80044bc:	4c0d      	ldr	r4, [pc, #52]	@ (80044f4 <__libc_init_array+0x3c>)
 80044be:	1b64      	subs	r4, r4, r5
 80044c0:	10a4      	asrs	r4, r4, #2
 80044c2:	2600      	movs	r6, #0
 80044c4:	42a6      	cmp	r6, r4
 80044c6:	d109      	bne.n	80044dc <__libc_init_array+0x24>
 80044c8:	4d0b      	ldr	r5, [pc, #44]	@ (80044f8 <__libc_init_array+0x40>)
 80044ca:	4c0c      	ldr	r4, [pc, #48]	@ (80044fc <__libc_init_array+0x44>)
 80044cc:	f000 fd58 	bl	8004f80 <_init>
 80044d0:	1b64      	subs	r4, r4, r5
 80044d2:	10a4      	asrs	r4, r4, #2
 80044d4:	2600      	movs	r6, #0
 80044d6:	42a6      	cmp	r6, r4
 80044d8:	d105      	bne.n	80044e6 <__libc_init_array+0x2e>
 80044da:	bd70      	pop	{r4, r5, r6, pc}
 80044dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044e0:	4798      	blx	r3
 80044e2:	3601      	adds	r6, #1
 80044e4:	e7ee      	b.n	80044c4 <__libc_init_array+0xc>
 80044e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ea:	4798      	blx	r3
 80044ec:	3601      	adds	r6, #1
 80044ee:	e7f2      	b.n	80044d6 <__libc_init_array+0x1e>
 80044f0:	0800523c 	.word	0x0800523c
 80044f4:	0800523c 	.word	0x0800523c
 80044f8:	0800523c 	.word	0x0800523c
 80044fc:	08005240 	.word	0x08005240

08004500 <__retarget_lock_init_recursive>:
 8004500:	4770      	bx	lr

08004502 <__retarget_lock_acquire_recursive>:
 8004502:	4770      	bx	lr

08004504 <__retarget_lock_release_recursive>:
 8004504:	4770      	bx	lr
	...

08004508 <_free_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	4605      	mov	r5, r0
 800450c:	2900      	cmp	r1, #0
 800450e:	d041      	beq.n	8004594 <_free_r+0x8c>
 8004510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004514:	1f0c      	subs	r4, r1, #4
 8004516:	2b00      	cmp	r3, #0
 8004518:	bfb8      	it	lt
 800451a:	18e4      	addlt	r4, r4, r3
 800451c:	f000 f8e0 	bl	80046e0 <__malloc_lock>
 8004520:	4a1d      	ldr	r2, [pc, #116]	@ (8004598 <_free_r+0x90>)
 8004522:	6813      	ldr	r3, [r2, #0]
 8004524:	b933      	cbnz	r3, 8004534 <_free_r+0x2c>
 8004526:	6063      	str	r3, [r4, #4]
 8004528:	6014      	str	r4, [r2, #0]
 800452a:	4628      	mov	r0, r5
 800452c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004530:	f000 b8dc 	b.w	80046ec <__malloc_unlock>
 8004534:	42a3      	cmp	r3, r4
 8004536:	d908      	bls.n	800454a <_free_r+0x42>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	1821      	adds	r1, r4, r0
 800453c:	428b      	cmp	r3, r1
 800453e:	bf01      	itttt	eq
 8004540:	6819      	ldreq	r1, [r3, #0]
 8004542:	685b      	ldreq	r3, [r3, #4]
 8004544:	1809      	addeq	r1, r1, r0
 8004546:	6021      	streq	r1, [r4, #0]
 8004548:	e7ed      	b.n	8004526 <_free_r+0x1e>
 800454a:	461a      	mov	r2, r3
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	b10b      	cbz	r3, 8004554 <_free_r+0x4c>
 8004550:	42a3      	cmp	r3, r4
 8004552:	d9fa      	bls.n	800454a <_free_r+0x42>
 8004554:	6811      	ldr	r1, [r2, #0]
 8004556:	1850      	adds	r0, r2, r1
 8004558:	42a0      	cmp	r0, r4
 800455a:	d10b      	bne.n	8004574 <_free_r+0x6c>
 800455c:	6820      	ldr	r0, [r4, #0]
 800455e:	4401      	add	r1, r0
 8004560:	1850      	adds	r0, r2, r1
 8004562:	4283      	cmp	r3, r0
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	d1e0      	bne.n	800452a <_free_r+0x22>
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	6053      	str	r3, [r2, #4]
 800456e:	4408      	add	r0, r1
 8004570:	6010      	str	r0, [r2, #0]
 8004572:	e7da      	b.n	800452a <_free_r+0x22>
 8004574:	d902      	bls.n	800457c <_free_r+0x74>
 8004576:	230c      	movs	r3, #12
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	e7d6      	b.n	800452a <_free_r+0x22>
 800457c:	6820      	ldr	r0, [r4, #0]
 800457e:	1821      	adds	r1, r4, r0
 8004580:	428b      	cmp	r3, r1
 8004582:	bf04      	itt	eq
 8004584:	6819      	ldreq	r1, [r3, #0]
 8004586:	685b      	ldreq	r3, [r3, #4]
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	bf04      	itt	eq
 800458c:	1809      	addeq	r1, r1, r0
 800458e:	6021      	streq	r1, [r4, #0]
 8004590:	6054      	str	r4, [r2, #4]
 8004592:	e7ca      	b.n	800452a <_free_r+0x22>
 8004594:	bd38      	pop	{r3, r4, r5, pc}
 8004596:	bf00      	nop
 8004598:	20000284 	.word	0x20000284

0800459c <sbrk_aligned>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4e0f      	ldr	r6, [pc, #60]	@ (80045dc <sbrk_aligned+0x40>)
 80045a0:	460c      	mov	r4, r1
 80045a2:	6831      	ldr	r1, [r6, #0]
 80045a4:	4605      	mov	r5, r0
 80045a6:	b911      	cbnz	r1, 80045ae <sbrk_aligned+0x12>
 80045a8:	f000 fcda 	bl	8004f60 <_sbrk_r>
 80045ac:	6030      	str	r0, [r6, #0]
 80045ae:	4621      	mov	r1, r4
 80045b0:	4628      	mov	r0, r5
 80045b2:	f000 fcd5 	bl	8004f60 <_sbrk_r>
 80045b6:	1c43      	adds	r3, r0, #1
 80045b8:	d103      	bne.n	80045c2 <sbrk_aligned+0x26>
 80045ba:	f04f 34ff 	mov.w	r4, #4294967295
 80045be:	4620      	mov	r0, r4
 80045c0:	bd70      	pop	{r4, r5, r6, pc}
 80045c2:	1cc4      	adds	r4, r0, #3
 80045c4:	f024 0403 	bic.w	r4, r4, #3
 80045c8:	42a0      	cmp	r0, r4
 80045ca:	d0f8      	beq.n	80045be <sbrk_aligned+0x22>
 80045cc:	1a21      	subs	r1, r4, r0
 80045ce:	4628      	mov	r0, r5
 80045d0:	f000 fcc6 	bl	8004f60 <_sbrk_r>
 80045d4:	3001      	adds	r0, #1
 80045d6:	d1f2      	bne.n	80045be <sbrk_aligned+0x22>
 80045d8:	e7ef      	b.n	80045ba <sbrk_aligned+0x1e>
 80045da:	bf00      	nop
 80045dc:	20000280 	.word	0x20000280

080045e0 <_malloc_r>:
 80045e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e4:	1ccd      	adds	r5, r1, #3
 80045e6:	f025 0503 	bic.w	r5, r5, #3
 80045ea:	3508      	adds	r5, #8
 80045ec:	2d0c      	cmp	r5, #12
 80045ee:	bf38      	it	cc
 80045f0:	250c      	movcc	r5, #12
 80045f2:	2d00      	cmp	r5, #0
 80045f4:	4606      	mov	r6, r0
 80045f6:	db01      	blt.n	80045fc <_malloc_r+0x1c>
 80045f8:	42a9      	cmp	r1, r5
 80045fa:	d904      	bls.n	8004606 <_malloc_r+0x26>
 80045fc:	230c      	movs	r3, #12
 80045fe:	6033      	str	r3, [r6, #0]
 8004600:	2000      	movs	r0, #0
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046dc <_malloc_r+0xfc>
 800460a:	f000 f869 	bl	80046e0 <__malloc_lock>
 800460e:	f8d8 3000 	ldr.w	r3, [r8]
 8004612:	461c      	mov	r4, r3
 8004614:	bb44      	cbnz	r4, 8004668 <_malloc_r+0x88>
 8004616:	4629      	mov	r1, r5
 8004618:	4630      	mov	r0, r6
 800461a:	f7ff ffbf 	bl	800459c <sbrk_aligned>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	4604      	mov	r4, r0
 8004622:	d158      	bne.n	80046d6 <_malloc_r+0xf6>
 8004624:	f8d8 4000 	ldr.w	r4, [r8]
 8004628:	4627      	mov	r7, r4
 800462a:	2f00      	cmp	r7, #0
 800462c:	d143      	bne.n	80046b6 <_malloc_r+0xd6>
 800462e:	2c00      	cmp	r4, #0
 8004630:	d04b      	beq.n	80046ca <_malloc_r+0xea>
 8004632:	6823      	ldr	r3, [r4, #0]
 8004634:	4639      	mov	r1, r7
 8004636:	4630      	mov	r0, r6
 8004638:	eb04 0903 	add.w	r9, r4, r3
 800463c:	f000 fc90 	bl	8004f60 <_sbrk_r>
 8004640:	4581      	cmp	r9, r0
 8004642:	d142      	bne.n	80046ca <_malloc_r+0xea>
 8004644:	6821      	ldr	r1, [r4, #0]
 8004646:	1a6d      	subs	r5, r5, r1
 8004648:	4629      	mov	r1, r5
 800464a:	4630      	mov	r0, r6
 800464c:	f7ff ffa6 	bl	800459c <sbrk_aligned>
 8004650:	3001      	adds	r0, #1
 8004652:	d03a      	beq.n	80046ca <_malloc_r+0xea>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	442b      	add	r3, r5
 8004658:	6023      	str	r3, [r4, #0]
 800465a:	f8d8 3000 	ldr.w	r3, [r8]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	bb62      	cbnz	r2, 80046bc <_malloc_r+0xdc>
 8004662:	f8c8 7000 	str.w	r7, [r8]
 8004666:	e00f      	b.n	8004688 <_malloc_r+0xa8>
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	1b52      	subs	r2, r2, r5
 800466c:	d420      	bmi.n	80046b0 <_malloc_r+0xd0>
 800466e:	2a0b      	cmp	r2, #11
 8004670:	d917      	bls.n	80046a2 <_malloc_r+0xc2>
 8004672:	1961      	adds	r1, r4, r5
 8004674:	42a3      	cmp	r3, r4
 8004676:	6025      	str	r5, [r4, #0]
 8004678:	bf18      	it	ne
 800467a:	6059      	strne	r1, [r3, #4]
 800467c:	6863      	ldr	r3, [r4, #4]
 800467e:	bf08      	it	eq
 8004680:	f8c8 1000 	streq.w	r1, [r8]
 8004684:	5162      	str	r2, [r4, r5]
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	4630      	mov	r0, r6
 800468a:	f000 f82f 	bl	80046ec <__malloc_unlock>
 800468e:	f104 000b 	add.w	r0, r4, #11
 8004692:	1d23      	adds	r3, r4, #4
 8004694:	f020 0007 	bic.w	r0, r0, #7
 8004698:	1ac2      	subs	r2, r0, r3
 800469a:	bf1c      	itt	ne
 800469c:	1a1b      	subne	r3, r3, r0
 800469e:	50a3      	strne	r3, [r4, r2]
 80046a0:	e7af      	b.n	8004602 <_malloc_r+0x22>
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	bf0c      	ite	eq
 80046a8:	f8c8 2000 	streq.w	r2, [r8]
 80046ac:	605a      	strne	r2, [r3, #4]
 80046ae:	e7eb      	b.n	8004688 <_malloc_r+0xa8>
 80046b0:	4623      	mov	r3, r4
 80046b2:	6864      	ldr	r4, [r4, #4]
 80046b4:	e7ae      	b.n	8004614 <_malloc_r+0x34>
 80046b6:	463c      	mov	r4, r7
 80046b8:	687f      	ldr	r7, [r7, #4]
 80046ba:	e7b6      	b.n	800462a <_malloc_r+0x4a>
 80046bc:	461a      	mov	r2, r3
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	42a3      	cmp	r3, r4
 80046c2:	d1fb      	bne.n	80046bc <_malloc_r+0xdc>
 80046c4:	2300      	movs	r3, #0
 80046c6:	6053      	str	r3, [r2, #4]
 80046c8:	e7de      	b.n	8004688 <_malloc_r+0xa8>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6033      	str	r3, [r6, #0]
 80046ce:	4630      	mov	r0, r6
 80046d0:	f000 f80c 	bl	80046ec <__malloc_unlock>
 80046d4:	e794      	b.n	8004600 <_malloc_r+0x20>
 80046d6:	6005      	str	r5, [r0, #0]
 80046d8:	e7d6      	b.n	8004688 <_malloc_r+0xa8>
 80046da:	bf00      	nop
 80046dc:	20000284 	.word	0x20000284

080046e0 <__malloc_lock>:
 80046e0:	4801      	ldr	r0, [pc, #4]	@ (80046e8 <__malloc_lock+0x8>)
 80046e2:	f7ff bf0e 	b.w	8004502 <__retarget_lock_acquire_recursive>
 80046e6:	bf00      	nop
 80046e8:	2000027c 	.word	0x2000027c

080046ec <__malloc_unlock>:
 80046ec:	4801      	ldr	r0, [pc, #4]	@ (80046f4 <__malloc_unlock+0x8>)
 80046ee:	f7ff bf09 	b.w	8004504 <__retarget_lock_release_recursive>
 80046f2:	bf00      	nop
 80046f4:	2000027c 	.word	0x2000027c

080046f8 <__sfputc_r>:
 80046f8:	6893      	ldr	r3, [r2, #8]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	b410      	push	{r4}
 8004700:	6093      	str	r3, [r2, #8]
 8004702:	da08      	bge.n	8004716 <__sfputc_r+0x1e>
 8004704:	6994      	ldr	r4, [r2, #24]
 8004706:	42a3      	cmp	r3, r4
 8004708:	db01      	blt.n	800470e <__sfputc_r+0x16>
 800470a:	290a      	cmp	r1, #10
 800470c:	d103      	bne.n	8004716 <__sfputc_r+0x1e>
 800470e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004712:	f7ff bde8 	b.w	80042e6 <__swbuf_r>
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	1c58      	adds	r0, r3, #1
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	7019      	strb	r1, [r3, #0]
 800471e:	4608      	mov	r0, r1
 8004720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004724:	4770      	bx	lr

08004726 <__sfputs_r>:
 8004726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004728:	4606      	mov	r6, r0
 800472a:	460f      	mov	r7, r1
 800472c:	4614      	mov	r4, r2
 800472e:	18d5      	adds	r5, r2, r3
 8004730:	42ac      	cmp	r4, r5
 8004732:	d101      	bne.n	8004738 <__sfputs_r+0x12>
 8004734:	2000      	movs	r0, #0
 8004736:	e007      	b.n	8004748 <__sfputs_r+0x22>
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	463a      	mov	r2, r7
 800473e:	4630      	mov	r0, r6
 8004740:	f7ff ffda 	bl	80046f8 <__sfputc_r>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d1f3      	bne.n	8004730 <__sfputs_r+0xa>
 8004748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800474c <_vfiprintf_r>:
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	460d      	mov	r5, r1
 8004752:	b09d      	sub	sp, #116	@ 0x74
 8004754:	4614      	mov	r4, r2
 8004756:	4698      	mov	r8, r3
 8004758:	4606      	mov	r6, r0
 800475a:	b118      	cbz	r0, 8004764 <_vfiprintf_r+0x18>
 800475c:	6a03      	ldr	r3, [r0, #32]
 800475e:	b90b      	cbnz	r3, 8004764 <_vfiprintf_r+0x18>
 8004760:	f7ff fcd0 	bl	8004104 <__sinit>
 8004764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004766:	07d9      	lsls	r1, r3, #31
 8004768:	d405      	bmi.n	8004776 <_vfiprintf_r+0x2a>
 800476a:	89ab      	ldrh	r3, [r5, #12]
 800476c:	059a      	lsls	r2, r3, #22
 800476e:	d402      	bmi.n	8004776 <_vfiprintf_r+0x2a>
 8004770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004772:	f7ff fec6 	bl	8004502 <__retarget_lock_acquire_recursive>
 8004776:	89ab      	ldrh	r3, [r5, #12]
 8004778:	071b      	lsls	r3, r3, #28
 800477a:	d501      	bpl.n	8004780 <_vfiprintf_r+0x34>
 800477c:	692b      	ldr	r3, [r5, #16]
 800477e:	b99b      	cbnz	r3, 80047a8 <_vfiprintf_r+0x5c>
 8004780:	4629      	mov	r1, r5
 8004782:	4630      	mov	r0, r6
 8004784:	f7ff fdee 	bl	8004364 <__swsetup_r>
 8004788:	b170      	cbz	r0, 80047a8 <_vfiprintf_r+0x5c>
 800478a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800478c:	07dc      	lsls	r4, r3, #31
 800478e:	d504      	bpl.n	800479a <_vfiprintf_r+0x4e>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b01d      	add	sp, #116	@ 0x74
 8004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479a:	89ab      	ldrh	r3, [r5, #12]
 800479c:	0598      	lsls	r0, r3, #22
 800479e:	d4f7      	bmi.n	8004790 <_vfiprintf_r+0x44>
 80047a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047a2:	f7ff feaf 	bl	8004504 <__retarget_lock_release_recursive>
 80047a6:	e7f3      	b.n	8004790 <_vfiprintf_r+0x44>
 80047a8:	2300      	movs	r3, #0
 80047aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80047ac:	2320      	movs	r3, #32
 80047ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80047b6:	2330      	movs	r3, #48	@ 0x30
 80047b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004968 <_vfiprintf_r+0x21c>
 80047bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047c0:	f04f 0901 	mov.w	r9, #1
 80047c4:	4623      	mov	r3, r4
 80047c6:	469a      	mov	sl, r3
 80047c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047cc:	b10a      	cbz	r2, 80047d2 <_vfiprintf_r+0x86>
 80047ce:	2a25      	cmp	r2, #37	@ 0x25
 80047d0:	d1f9      	bne.n	80047c6 <_vfiprintf_r+0x7a>
 80047d2:	ebba 0b04 	subs.w	fp, sl, r4
 80047d6:	d00b      	beq.n	80047f0 <_vfiprintf_r+0xa4>
 80047d8:	465b      	mov	r3, fp
 80047da:	4622      	mov	r2, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	4630      	mov	r0, r6
 80047e0:	f7ff ffa1 	bl	8004726 <__sfputs_r>
 80047e4:	3001      	adds	r0, #1
 80047e6:	f000 80a7 	beq.w	8004938 <_vfiprintf_r+0x1ec>
 80047ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047ec:	445a      	add	r2, fp
 80047ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80047f0:	f89a 3000 	ldrb.w	r3, [sl]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 809f 	beq.w	8004938 <_vfiprintf_r+0x1ec>
 80047fa:	2300      	movs	r3, #0
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004804:	f10a 0a01 	add.w	sl, sl, #1
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	9307      	str	r3, [sp, #28]
 800480c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004810:	931a      	str	r3, [sp, #104]	@ 0x68
 8004812:	4654      	mov	r4, sl
 8004814:	2205      	movs	r2, #5
 8004816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800481a:	4853      	ldr	r0, [pc, #332]	@ (8004968 <_vfiprintf_r+0x21c>)
 800481c:	f7fb fcd8 	bl	80001d0 <memchr>
 8004820:	9a04      	ldr	r2, [sp, #16]
 8004822:	b9d8      	cbnz	r0, 800485c <_vfiprintf_r+0x110>
 8004824:	06d1      	lsls	r1, r2, #27
 8004826:	bf44      	itt	mi
 8004828:	2320      	movmi	r3, #32
 800482a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800482e:	0713      	lsls	r3, r2, #28
 8004830:	bf44      	itt	mi
 8004832:	232b      	movmi	r3, #43	@ 0x2b
 8004834:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004838:	f89a 3000 	ldrb.w	r3, [sl]
 800483c:	2b2a      	cmp	r3, #42	@ 0x2a
 800483e:	d015      	beq.n	800486c <_vfiprintf_r+0x120>
 8004840:	9a07      	ldr	r2, [sp, #28]
 8004842:	4654      	mov	r4, sl
 8004844:	2000      	movs	r0, #0
 8004846:	f04f 0c0a 	mov.w	ip, #10
 800484a:	4621      	mov	r1, r4
 800484c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004850:	3b30      	subs	r3, #48	@ 0x30
 8004852:	2b09      	cmp	r3, #9
 8004854:	d94b      	bls.n	80048ee <_vfiprintf_r+0x1a2>
 8004856:	b1b0      	cbz	r0, 8004886 <_vfiprintf_r+0x13a>
 8004858:	9207      	str	r2, [sp, #28]
 800485a:	e014      	b.n	8004886 <_vfiprintf_r+0x13a>
 800485c:	eba0 0308 	sub.w	r3, r0, r8
 8004860:	fa09 f303 	lsl.w	r3, r9, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	9304      	str	r3, [sp, #16]
 8004868:	46a2      	mov	sl, r4
 800486a:	e7d2      	b.n	8004812 <_vfiprintf_r+0xc6>
 800486c:	9b03      	ldr	r3, [sp, #12]
 800486e:	1d19      	adds	r1, r3, #4
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	9103      	str	r1, [sp, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	bfbb      	ittet	lt
 8004878:	425b      	neglt	r3, r3
 800487a:	f042 0202 	orrlt.w	r2, r2, #2
 800487e:	9307      	strge	r3, [sp, #28]
 8004880:	9307      	strlt	r3, [sp, #28]
 8004882:	bfb8      	it	lt
 8004884:	9204      	strlt	r2, [sp, #16]
 8004886:	7823      	ldrb	r3, [r4, #0]
 8004888:	2b2e      	cmp	r3, #46	@ 0x2e
 800488a:	d10a      	bne.n	80048a2 <_vfiprintf_r+0x156>
 800488c:	7863      	ldrb	r3, [r4, #1]
 800488e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004890:	d132      	bne.n	80048f8 <_vfiprintf_r+0x1ac>
 8004892:	9b03      	ldr	r3, [sp, #12]
 8004894:	1d1a      	adds	r2, r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	9203      	str	r2, [sp, #12]
 800489a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800489e:	3402      	adds	r4, #2
 80048a0:	9305      	str	r3, [sp, #20]
 80048a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004978 <_vfiprintf_r+0x22c>
 80048a6:	7821      	ldrb	r1, [r4, #0]
 80048a8:	2203      	movs	r2, #3
 80048aa:	4650      	mov	r0, sl
 80048ac:	f7fb fc90 	bl	80001d0 <memchr>
 80048b0:	b138      	cbz	r0, 80048c2 <_vfiprintf_r+0x176>
 80048b2:	9b04      	ldr	r3, [sp, #16]
 80048b4:	eba0 000a 	sub.w	r0, r0, sl
 80048b8:	2240      	movs	r2, #64	@ 0x40
 80048ba:	4082      	lsls	r2, r0
 80048bc:	4313      	orrs	r3, r2
 80048be:	3401      	adds	r4, #1
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c6:	4829      	ldr	r0, [pc, #164]	@ (800496c <_vfiprintf_r+0x220>)
 80048c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048cc:	2206      	movs	r2, #6
 80048ce:	f7fb fc7f 	bl	80001d0 <memchr>
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d03f      	beq.n	8004956 <_vfiprintf_r+0x20a>
 80048d6:	4b26      	ldr	r3, [pc, #152]	@ (8004970 <_vfiprintf_r+0x224>)
 80048d8:	bb1b      	cbnz	r3, 8004922 <_vfiprintf_r+0x1d6>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	3307      	adds	r3, #7
 80048de:	f023 0307 	bic.w	r3, r3, #7
 80048e2:	3308      	adds	r3, #8
 80048e4:	9303      	str	r3, [sp, #12]
 80048e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048e8:	443b      	add	r3, r7
 80048ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80048ec:	e76a      	b.n	80047c4 <_vfiprintf_r+0x78>
 80048ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80048f2:	460c      	mov	r4, r1
 80048f4:	2001      	movs	r0, #1
 80048f6:	e7a8      	b.n	800484a <_vfiprintf_r+0xfe>
 80048f8:	2300      	movs	r3, #0
 80048fa:	3401      	adds	r4, #1
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	4619      	mov	r1, r3
 8004900:	f04f 0c0a 	mov.w	ip, #10
 8004904:	4620      	mov	r0, r4
 8004906:	f810 2b01 	ldrb.w	r2, [r0], #1
 800490a:	3a30      	subs	r2, #48	@ 0x30
 800490c:	2a09      	cmp	r2, #9
 800490e:	d903      	bls.n	8004918 <_vfiprintf_r+0x1cc>
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0c6      	beq.n	80048a2 <_vfiprintf_r+0x156>
 8004914:	9105      	str	r1, [sp, #20]
 8004916:	e7c4      	b.n	80048a2 <_vfiprintf_r+0x156>
 8004918:	fb0c 2101 	mla	r1, ip, r1, r2
 800491c:	4604      	mov	r4, r0
 800491e:	2301      	movs	r3, #1
 8004920:	e7f0      	b.n	8004904 <_vfiprintf_r+0x1b8>
 8004922:	ab03      	add	r3, sp, #12
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	462a      	mov	r2, r5
 8004928:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <_vfiprintf_r+0x228>)
 800492a:	a904      	add	r1, sp, #16
 800492c:	4630      	mov	r0, r6
 800492e:	f3af 8000 	nop.w
 8004932:	4607      	mov	r7, r0
 8004934:	1c78      	adds	r0, r7, #1
 8004936:	d1d6      	bne.n	80048e6 <_vfiprintf_r+0x19a>
 8004938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800493a:	07d9      	lsls	r1, r3, #31
 800493c:	d405      	bmi.n	800494a <_vfiprintf_r+0x1fe>
 800493e:	89ab      	ldrh	r3, [r5, #12]
 8004940:	059a      	lsls	r2, r3, #22
 8004942:	d402      	bmi.n	800494a <_vfiprintf_r+0x1fe>
 8004944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004946:	f7ff fddd 	bl	8004504 <__retarget_lock_release_recursive>
 800494a:	89ab      	ldrh	r3, [r5, #12]
 800494c:	065b      	lsls	r3, r3, #25
 800494e:	f53f af1f 	bmi.w	8004790 <_vfiprintf_r+0x44>
 8004952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004954:	e71e      	b.n	8004794 <_vfiprintf_r+0x48>
 8004956:	ab03      	add	r3, sp, #12
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	462a      	mov	r2, r5
 800495c:	4b05      	ldr	r3, [pc, #20]	@ (8004974 <_vfiprintf_r+0x228>)
 800495e:	a904      	add	r1, sp, #16
 8004960:	4630      	mov	r0, r6
 8004962:	f000 f879 	bl	8004a58 <_printf_i>
 8004966:	e7e4      	b.n	8004932 <_vfiprintf_r+0x1e6>
 8004968:	08005200 	.word	0x08005200
 800496c:	0800520a 	.word	0x0800520a
 8004970:	00000000 	.word	0x00000000
 8004974:	08004727 	.word	0x08004727
 8004978:	08005206 	.word	0x08005206

0800497c <_printf_common>:
 800497c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	4616      	mov	r6, r2
 8004982:	4698      	mov	r8, r3
 8004984:	688a      	ldr	r2, [r1, #8]
 8004986:	690b      	ldr	r3, [r1, #16]
 8004988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800498c:	4293      	cmp	r3, r2
 800498e:	bfb8      	it	lt
 8004990:	4613      	movlt	r3, r2
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004998:	4607      	mov	r7, r0
 800499a:	460c      	mov	r4, r1
 800499c:	b10a      	cbz	r2, 80049a2 <_printf_common+0x26>
 800499e:	3301      	adds	r3, #1
 80049a0:	6033      	str	r3, [r6, #0]
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	0699      	lsls	r1, r3, #26
 80049a6:	bf42      	ittt	mi
 80049a8:	6833      	ldrmi	r3, [r6, #0]
 80049aa:	3302      	addmi	r3, #2
 80049ac:	6033      	strmi	r3, [r6, #0]
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	f015 0506 	ands.w	r5, r5, #6
 80049b4:	d106      	bne.n	80049c4 <_printf_common+0x48>
 80049b6:	f104 0a19 	add.w	sl, r4, #25
 80049ba:	68e3      	ldr	r3, [r4, #12]
 80049bc:	6832      	ldr	r2, [r6, #0]
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	42ab      	cmp	r3, r5
 80049c2:	dc26      	bgt.n	8004a12 <_printf_common+0x96>
 80049c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049c8:	6822      	ldr	r2, [r4, #0]
 80049ca:	3b00      	subs	r3, #0
 80049cc:	bf18      	it	ne
 80049ce:	2301      	movne	r3, #1
 80049d0:	0692      	lsls	r2, r2, #26
 80049d2:	d42b      	bmi.n	8004a2c <_printf_common+0xb0>
 80049d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049d8:	4641      	mov	r1, r8
 80049da:	4638      	mov	r0, r7
 80049dc:	47c8      	blx	r9
 80049de:	3001      	adds	r0, #1
 80049e0:	d01e      	beq.n	8004a20 <_printf_common+0xa4>
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	6922      	ldr	r2, [r4, #16]
 80049e6:	f003 0306 	and.w	r3, r3, #6
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	bf02      	ittt	eq
 80049ee:	68e5      	ldreq	r5, [r4, #12]
 80049f0:	6833      	ldreq	r3, [r6, #0]
 80049f2:	1aed      	subeq	r5, r5, r3
 80049f4:	68a3      	ldr	r3, [r4, #8]
 80049f6:	bf0c      	ite	eq
 80049f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049fc:	2500      	movne	r5, #0
 80049fe:	4293      	cmp	r3, r2
 8004a00:	bfc4      	itt	gt
 8004a02:	1a9b      	subgt	r3, r3, r2
 8004a04:	18ed      	addgt	r5, r5, r3
 8004a06:	2600      	movs	r6, #0
 8004a08:	341a      	adds	r4, #26
 8004a0a:	42b5      	cmp	r5, r6
 8004a0c:	d11a      	bne.n	8004a44 <_printf_common+0xc8>
 8004a0e:	2000      	movs	r0, #0
 8004a10:	e008      	b.n	8004a24 <_printf_common+0xa8>
 8004a12:	2301      	movs	r3, #1
 8004a14:	4652      	mov	r2, sl
 8004a16:	4641      	mov	r1, r8
 8004a18:	4638      	mov	r0, r7
 8004a1a:	47c8      	blx	r9
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	d103      	bne.n	8004a28 <_printf_common+0xac>
 8004a20:	f04f 30ff 	mov.w	r0, #4294967295
 8004a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a28:	3501      	adds	r5, #1
 8004a2a:	e7c6      	b.n	80049ba <_printf_common+0x3e>
 8004a2c:	18e1      	adds	r1, r4, r3
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	2030      	movs	r0, #48	@ 0x30
 8004a32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a36:	4422      	add	r2, r4
 8004a38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a40:	3302      	adds	r3, #2
 8004a42:	e7c7      	b.n	80049d4 <_printf_common+0x58>
 8004a44:	2301      	movs	r3, #1
 8004a46:	4622      	mov	r2, r4
 8004a48:	4641      	mov	r1, r8
 8004a4a:	4638      	mov	r0, r7
 8004a4c:	47c8      	blx	r9
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d0e6      	beq.n	8004a20 <_printf_common+0xa4>
 8004a52:	3601      	adds	r6, #1
 8004a54:	e7d9      	b.n	8004a0a <_printf_common+0x8e>
	...

08004a58 <_printf_i>:
 8004a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a5c:	7e0f      	ldrb	r7, [r1, #24]
 8004a5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a60:	2f78      	cmp	r7, #120	@ 0x78
 8004a62:	4691      	mov	r9, r2
 8004a64:	4680      	mov	r8, r0
 8004a66:	460c      	mov	r4, r1
 8004a68:	469a      	mov	sl, r3
 8004a6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a6e:	d807      	bhi.n	8004a80 <_printf_i+0x28>
 8004a70:	2f62      	cmp	r7, #98	@ 0x62
 8004a72:	d80a      	bhi.n	8004a8a <_printf_i+0x32>
 8004a74:	2f00      	cmp	r7, #0
 8004a76:	f000 80d2 	beq.w	8004c1e <_printf_i+0x1c6>
 8004a7a:	2f58      	cmp	r7, #88	@ 0x58
 8004a7c:	f000 80b9 	beq.w	8004bf2 <_printf_i+0x19a>
 8004a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a88:	e03a      	b.n	8004b00 <_printf_i+0xa8>
 8004a8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a8e:	2b15      	cmp	r3, #21
 8004a90:	d8f6      	bhi.n	8004a80 <_printf_i+0x28>
 8004a92:	a101      	add	r1, pc, #4	@ (adr r1, 8004a98 <_printf_i+0x40>)
 8004a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a98:	08004af1 	.word	0x08004af1
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004a81 	.word	0x08004a81
 8004aa4:	08004a81 	.word	0x08004a81
 8004aa8:	08004a81 	.word	0x08004a81
 8004aac:	08004a81 	.word	0x08004a81
 8004ab0:	08004b05 	.word	0x08004b05
 8004ab4:	08004a81 	.word	0x08004a81
 8004ab8:	08004a81 	.word	0x08004a81
 8004abc:	08004a81 	.word	0x08004a81
 8004ac0:	08004a81 	.word	0x08004a81
 8004ac4:	08004c05 	.word	0x08004c05
 8004ac8:	08004b2f 	.word	0x08004b2f
 8004acc:	08004bbf 	.word	0x08004bbf
 8004ad0:	08004a81 	.word	0x08004a81
 8004ad4:	08004a81 	.word	0x08004a81
 8004ad8:	08004c27 	.word	0x08004c27
 8004adc:	08004a81 	.word	0x08004a81
 8004ae0:	08004b2f 	.word	0x08004b2f
 8004ae4:	08004a81 	.word	0x08004a81
 8004ae8:	08004a81 	.word	0x08004a81
 8004aec:	08004bc7 	.word	0x08004bc7
 8004af0:	6833      	ldr	r3, [r6, #0]
 8004af2:	1d1a      	adds	r2, r3, #4
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004afc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b00:	2301      	movs	r3, #1
 8004b02:	e09d      	b.n	8004c40 <_printf_i+0x1e8>
 8004b04:	6833      	ldr	r3, [r6, #0]
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	1d19      	adds	r1, r3, #4
 8004b0a:	6031      	str	r1, [r6, #0]
 8004b0c:	0606      	lsls	r6, r0, #24
 8004b0e:	d501      	bpl.n	8004b14 <_printf_i+0xbc>
 8004b10:	681d      	ldr	r5, [r3, #0]
 8004b12:	e003      	b.n	8004b1c <_printf_i+0xc4>
 8004b14:	0645      	lsls	r5, r0, #25
 8004b16:	d5fb      	bpl.n	8004b10 <_printf_i+0xb8>
 8004b18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b1c:	2d00      	cmp	r5, #0
 8004b1e:	da03      	bge.n	8004b28 <_printf_i+0xd0>
 8004b20:	232d      	movs	r3, #45	@ 0x2d
 8004b22:	426d      	negs	r5, r5
 8004b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b28:	4859      	ldr	r0, [pc, #356]	@ (8004c90 <_printf_i+0x238>)
 8004b2a:	230a      	movs	r3, #10
 8004b2c:	e011      	b.n	8004b52 <_printf_i+0xfa>
 8004b2e:	6821      	ldr	r1, [r4, #0]
 8004b30:	6833      	ldr	r3, [r6, #0]
 8004b32:	0608      	lsls	r0, r1, #24
 8004b34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b38:	d402      	bmi.n	8004b40 <_printf_i+0xe8>
 8004b3a:	0649      	lsls	r1, r1, #25
 8004b3c:	bf48      	it	mi
 8004b3e:	b2ad      	uxthmi	r5, r5
 8004b40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b42:	4853      	ldr	r0, [pc, #332]	@ (8004c90 <_printf_i+0x238>)
 8004b44:	6033      	str	r3, [r6, #0]
 8004b46:	bf14      	ite	ne
 8004b48:	230a      	movne	r3, #10
 8004b4a:	2308      	moveq	r3, #8
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b52:	6866      	ldr	r6, [r4, #4]
 8004b54:	60a6      	str	r6, [r4, #8]
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	bfa2      	ittt	ge
 8004b5a:	6821      	ldrge	r1, [r4, #0]
 8004b5c:	f021 0104 	bicge.w	r1, r1, #4
 8004b60:	6021      	strge	r1, [r4, #0]
 8004b62:	b90d      	cbnz	r5, 8004b68 <_printf_i+0x110>
 8004b64:	2e00      	cmp	r6, #0
 8004b66:	d04b      	beq.n	8004c00 <_printf_i+0x1a8>
 8004b68:	4616      	mov	r6, r2
 8004b6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b6e:	fb03 5711 	mls	r7, r3, r1, r5
 8004b72:	5dc7      	ldrb	r7, [r0, r7]
 8004b74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b78:	462f      	mov	r7, r5
 8004b7a:	42bb      	cmp	r3, r7
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	d9f4      	bls.n	8004b6a <_printf_i+0x112>
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d10b      	bne.n	8004b9c <_printf_i+0x144>
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	07df      	lsls	r7, r3, #31
 8004b88:	d508      	bpl.n	8004b9c <_printf_i+0x144>
 8004b8a:	6923      	ldr	r3, [r4, #16]
 8004b8c:	6861      	ldr	r1, [r4, #4]
 8004b8e:	4299      	cmp	r1, r3
 8004b90:	bfde      	ittt	le
 8004b92:	2330      	movle	r3, #48	@ 0x30
 8004b94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b9c:	1b92      	subs	r2, r2, r6
 8004b9e:	6122      	str	r2, [r4, #16]
 8004ba0:	f8cd a000 	str.w	sl, [sp]
 8004ba4:	464b      	mov	r3, r9
 8004ba6:	aa03      	add	r2, sp, #12
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4640      	mov	r0, r8
 8004bac:	f7ff fee6 	bl	800497c <_printf_common>
 8004bb0:	3001      	adds	r0, #1
 8004bb2:	d14a      	bne.n	8004c4a <_printf_i+0x1f2>
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	b004      	add	sp, #16
 8004bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	f043 0320 	orr.w	r3, r3, #32
 8004bc4:	6023      	str	r3, [r4, #0]
 8004bc6:	4833      	ldr	r0, [pc, #204]	@ (8004c94 <_printf_i+0x23c>)
 8004bc8:	2778      	movs	r7, #120	@ 0x78
 8004bca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bce:	6823      	ldr	r3, [r4, #0]
 8004bd0:	6831      	ldr	r1, [r6, #0]
 8004bd2:	061f      	lsls	r7, r3, #24
 8004bd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bd8:	d402      	bmi.n	8004be0 <_printf_i+0x188>
 8004bda:	065f      	lsls	r7, r3, #25
 8004bdc:	bf48      	it	mi
 8004bde:	b2ad      	uxthmi	r5, r5
 8004be0:	6031      	str	r1, [r6, #0]
 8004be2:	07d9      	lsls	r1, r3, #31
 8004be4:	bf44      	itt	mi
 8004be6:	f043 0320 	orrmi.w	r3, r3, #32
 8004bea:	6023      	strmi	r3, [r4, #0]
 8004bec:	b11d      	cbz	r5, 8004bf6 <_printf_i+0x19e>
 8004bee:	2310      	movs	r3, #16
 8004bf0:	e7ac      	b.n	8004b4c <_printf_i+0xf4>
 8004bf2:	4827      	ldr	r0, [pc, #156]	@ (8004c90 <_printf_i+0x238>)
 8004bf4:	e7e9      	b.n	8004bca <_printf_i+0x172>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	f023 0320 	bic.w	r3, r3, #32
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	e7f6      	b.n	8004bee <_printf_i+0x196>
 8004c00:	4616      	mov	r6, r2
 8004c02:	e7bd      	b.n	8004b80 <_printf_i+0x128>
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	6825      	ldr	r5, [r4, #0]
 8004c08:	6961      	ldr	r1, [r4, #20]
 8004c0a:	1d18      	adds	r0, r3, #4
 8004c0c:	6030      	str	r0, [r6, #0]
 8004c0e:	062e      	lsls	r6, r5, #24
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0x1c0>
 8004c14:	6019      	str	r1, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <_printf_i+0x1c6>
 8004c18:	0668      	lsls	r0, r5, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0x1bc>
 8004c1c:	8019      	strh	r1, [r3, #0]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	6123      	str	r3, [r4, #16]
 8004c22:	4616      	mov	r6, r2
 8004c24:	e7bc      	b.n	8004ba0 <_printf_i+0x148>
 8004c26:	6833      	ldr	r3, [r6, #0]
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	6032      	str	r2, [r6, #0]
 8004c2c:	681e      	ldr	r6, [r3, #0]
 8004c2e:	6862      	ldr	r2, [r4, #4]
 8004c30:	2100      	movs	r1, #0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f7fb facc 	bl	80001d0 <memchr>
 8004c38:	b108      	cbz	r0, 8004c3e <_printf_i+0x1e6>
 8004c3a:	1b80      	subs	r0, r0, r6
 8004c3c:	6060      	str	r0, [r4, #4]
 8004c3e:	6863      	ldr	r3, [r4, #4]
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c48:	e7aa      	b.n	8004ba0 <_printf_i+0x148>
 8004c4a:	6923      	ldr	r3, [r4, #16]
 8004c4c:	4632      	mov	r2, r6
 8004c4e:	4649      	mov	r1, r9
 8004c50:	4640      	mov	r0, r8
 8004c52:	47d0      	blx	sl
 8004c54:	3001      	adds	r0, #1
 8004c56:	d0ad      	beq.n	8004bb4 <_printf_i+0x15c>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	079b      	lsls	r3, r3, #30
 8004c5c:	d413      	bmi.n	8004c86 <_printf_i+0x22e>
 8004c5e:	68e0      	ldr	r0, [r4, #12]
 8004c60:	9b03      	ldr	r3, [sp, #12]
 8004c62:	4298      	cmp	r0, r3
 8004c64:	bfb8      	it	lt
 8004c66:	4618      	movlt	r0, r3
 8004c68:	e7a6      	b.n	8004bb8 <_printf_i+0x160>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4649      	mov	r1, r9
 8004c70:	4640      	mov	r0, r8
 8004c72:	47d0      	blx	sl
 8004c74:	3001      	adds	r0, #1
 8004c76:	d09d      	beq.n	8004bb4 <_printf_i+0x15c>
 8004c78:	3501      	adds	r5, #1
 8004c7a:	68e3      	ldr	r3, [r4, #12]
 8004c7c:	9903      	ldr	r1, [sp, #12]
 8004c7e:	1a5b      	subs	r3, r3, r1
 8004c80:	42ab      	cmp	r3, r5
 8004c82:	dcf2      	bgt.n	8004c6a <_printf_i+0x212>
 8004c84:	e7eb      	b.n	8004c5e <_printf_i+0x206>
 8004c86:	2500      	movs	r5, #0
 8004c88:	f104 0619 	add.w	r6, r4, #25
 8004c8c:	e7f5      	b.n	8004c7a <_printf_i+0x222>
 8004c8e:	bf00      	nop
 8004c90:	08005211 	.word	0x08005211
 8004c94:	08005222 	.word	0x08005222

08004c98 <__sflush_r>:
 8004c98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca0:	0716      	lsls	r6, r2, #28
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	d454      	bmi.n	8004d52 <__sflush_r+0xba>
 8004ca8:	684b      	ldr	r3, [r1, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	dc02      	bgt.n	8004cb4 <__sflush_r+0x1c>
 8004cae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dd48      	ble.n	8004d46 <__sflush_r+0xae>
 8004cb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cb6:	2e00      	cmp	r6, #0
 8004cb8:	d045      	beq.n	8004d46 <__sflush_r+0xae>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cc0:	682f      	ldr	r7, [r5, #0]
 8004cc2:	6a21      	ldr	r1, [r4, #32]
 8004cc4:	602b      	str	r3, [r5, #0]
 8004cc6:	d030      	beq.n	8004d2a <__sflush_r+0x92>
 8004cc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	0759      	lsls	r1, r3, #29
 8004cce:	d505      	bpl.n	8004cdc <__sflush_r+0x44>
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	1ad2      	subs	r2, r2, r3
 8004cd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004cd6:	b10b      	cbz	r3, 8004cdc <__sflush_r+0x44>
 8004cd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	2300      	movs	r3, #0
 8004cde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004ce0:	6a21      	ldr	r1, [r4, #32]
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	47b0      	blx	r6
 8004ce6:	1c43      	adds	r3, r0, #1
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	d106      	bne.n	8004cfa <__sflush_r+0x62>
 8004cec:	6829      	ldr	r1, [r5, #0]
 8004cee:	291d      	cmp	r1, #29
 8004cf0:	d82b      	bhi.n	8004d4a <__sflush_r+0xb2>
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	@ (8004d9c <__sflush_r+0x104>)
 8004cf4:	410a      	asrs	r2, r1
 8004cf6:	07d6      	lsls	r6, r2, #31
 8004cf8:	d427      	bmi.n	8004d4a <__sflush_r+0xb2>
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	6062      	str	r2, [r4, #4]
 8004cfe:	04d9      	lsls	r1, r3, #19
 8004d00:	6922      	ldr	r2, [r4, #16]
 8004d02:	6022      	str	r2, [r4, #0]
 8004d04:	d504      	bpl.n	8004d10 <__sflush_r+0x78>
 8004d06:	1c42      	adds	r2, r0, #1
 8004d08:	d101      	bne.n	8004d0e <__sflush_r+0x76>
 8004d0a:	682b      	ldr	r3, [r5, #0]
 8004d0c:	b903      	cbnz	r3, 8004d10 <__sflush_r+0x78>
 8004d0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d12:	602f      	str	r7, [r5, #0]
 8004d14:	b1b9      	cbz	r1, 8004d46 <__sflush_r+0xae>
 8004d16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d002      	beq.n	8004d24 <__sflush_r+0x8c>
 8004d1e:	4628      	mov	r0, r5
 8004d20:	f7ff fbf2 	bl	8004508 <_free_r>
 8004d24:	2300      	movs	r3, #0
 8004d26:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d28:	e00d      	b.n	8004d46 <__sflush_r+0xae>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	47b0      	blx	r6
 8004d30:	4602      	mov	r2, r0
 8004d32:	1c50      	adds	r0, r2, #1
 8004d34:	d1c9      	bne.n	8004cca <__sflush_r+0x32>
 8004d36:	682b      	ldr	r3, [r5, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0c6      	beq.n	8004cca <__sflush_r+0x32>
 8004d3c:	2b1d      	cmp	r3, #29
 8004d3e:	d001      	beq.n	8004d44 <__sflush_r+0xac>
 8004d40:	2b16      	cmp	r3, #22
 8004d42:	d11e      	bne.n	8004d82 <__sflush_r+0xea>
 8004d44:	602f      	str	r7, [r5, #0]
 8004d46:	2000      	movs	r0, #0
 8004d48:	e022      	b.n	8004d90 <__sflush_r+0xf8>
 8004d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d4e:	b21b      	sxth	r3, r3
 8004d50:	e01b      	b.n	8004d8a <__sflush_r+0xf2>
 8004d52:	690f      	ldr	r7, [r1, #16]
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	d0f6      	beq.n	8004d46 <__sflush_r+0xae>
 8004d58:	0793      	lsls	r3, r2, #30
 8004d5a:	680e      	ldr	r6, [r1, #0]
 8004d5c:	bf08      	it	eq
 8004d5e:	694b      	ldreq	r3, [r1, #20]
 8004d60:	600f      	str	r7, [r1, #0]
 8004d62:	bf18      	it	ne
 8004d64:	2300      	movne	r3, #0
 8004d66:	eba6 0807 	sub.w	r8, r6, r7
 8004d6a:	608b      	str	r3, [r1, #8]
 8004d6c:	f1b8 0f00 	cmp.w	r8, #0
 8004d70:	dde9      	ble.n	8004d46 <__sflush_r+0xae>
 8004d72:	6a21      	ldr	r1, [r4, #32]
 8004d74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004d76:	4643      	mov	r3, r8
 8004d78:	463a      	mov	r2, r7
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b0      	blx	r6
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	dc08      	bgt.n	8004d94 <__sflush_r+0xfc>
 8004d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d94:	4407      	add	r7, r0
 8004d96:	eba8 0800 	sub.w	r8, r8, r0
 8004d9a:	e7e7      	b.n	8004d6c <__sflush_r+0xd4>
 8004d9c:	dfbffffe 	.word	0xdfbffffe

08004da0 <_fflush_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	690b      	ldr	r3, [r1, #16]
 8004da4:	4605      	mov	r5, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	b913      	cbnz	r3, 8004db0 <_fflush_r+0x10>
 8004daa:	2500      	movs	r5, #0
 8004dac:	4628      	mov	r0, r5
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	b118      	cbz	r0, 8004dba <_fflush_r+0x1a>
 8004db2:	6a03      	ldr	r3, [r0, #32]
 8004db4:	b90b      	cbnz	r3, 8004dba <_fflush_r+0x1a>
 8004db6:	f7ff f9a5 	bl	8004104 <__sinit>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f3      	beq.n	8004daa <_fflush_r+0xa>
 8004dc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004dc4:	07d0      	lsls	r0, r2, #31
 8004dc6:	d404      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dc8:	0599      	lsls	r1, r3, #22
 8004dca:	d402      	bmi.n	8004dd2 <_fflush_r+0x32>
 8004dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dce:	f7ff fb98 	bl	8004502 <__retarget_lock_acquire_recursive>
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	f7ff ff5f 	bl	8004c98 <__sflush_r>
 8004dda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ddc:	07da      	lsls	r2, r3, #31
 8004dde:	4605      	mov	r5, r0
 8004de0:	d4e4      	bmi.n	8004dac <_fflush_r+0xc>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	059b      	lsls	r3, r3, #22
 8004de6:	d4e1      	bmi.n	8004dac <_fflush_r+0xc>
 8004de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dea:	f7ff fb8b 	bl	8004504 <__retarget_lock_release_recursive>
 8004dee:	e7dd      	b.n	8004dac <_fflush_r+0xc>

08004df0 <__swhatbuf_r>:
 8004df0:	b570      	push	{r4, r5, r6, lr}
 8004df2:	460c      	mov	r4, r1
 8004df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004df8:	2900      	cmp	r1, #0
 8004dfa:	b096      	sub	sp, #88	@ 0x58
 8004dfc:	4615      	mov	r5, r2
 8004dfe:	461e      	mov	r6, r3
 8004e00:	da0d      	bge.n	8004e1e <__swhatbuf_r+0x2e>
 8004e02:	89a3      	ldrh	r3, [r4, #12]
 8004e04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e08:	f04f 0100 	mov.w	r1, #0
 8004e0c:	bf14      	ite	ne
 8004e0e:	2340      	movne	r3, #64	@ 0x40
 8004e10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e14:	2000      	movs	r0, #0
 8004e16:	6031      	str	r1, [r6, #0]
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	b016      	add	sp, #88	@ 0x58
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
 8004e1e:	466a      	mov	r2, sp
 8004e20:	f000 f87c 	bl	8004f1c <_fstat_r>
 8004e24:	2800      	cmp	r0, #0
 8004e26:	dbec      	blt.n	8004e02 <__swhatbuf_r+0x12>
 8004e28:	9901      	ldr	r1, [sp, #4]
 8004e2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004e2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004e32:	4259      	negs	r1, r3
 8004e34:	4159      	adcs	r1, r3
 8004e36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e3a:	e7eb      	b.n	8004e14 <__swhatbuf_r+0x24>

08004e3c <__smakebuf_r>:
 8004e3c:	898b      	ldrh	r3, [r1, #12]
 8004e3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e40:	079d      	lsls	r5, r3, #30
 8004e42:	4606      	mov	r6, r0
 8004e44:	460c      	mov	r4, r1
 8004e46:	d507      	bpl.n	8004e58 <__smakebuf_r+0x1c>
 8004e48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	6123      	str	r3, [r4, #16]
 8004e50:	2301      	movs	r3, #1
 8004e52:	6163      	str	r3, [r4, #20]
 8004e54:	b003      	add	sp, #12
 8004e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e58:	ab01      	add	r3, sp, #4
 8004e5a:	466a      	mov	r2, sp
 8004e5c:	f7ff ffc8 	bl	8004df0 <__swhatbuf_r>
 8004e60:	9f00      	ldr	r7, [sp, #0]
 8004e62:	4605      	mov	r5, r0
 8004e64:	4639      	mov	r1, r7
 8004e66:	4630      	mov	r0, r6
 8004e68:	f7ff fbba 	bl	80045e0 <_malloc_r>
 8004e6c:	b948      	cbnz	r0, 8004e82 <__smakebuf_r+0x46>
 8004e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e72:	059a      	lsls	r2, r3, #22
 8004e74:	d4ee      	bmi.n	8004e54 <__smakebuf_r+0x18>
 8004e76:	f023 0303 	bic.w	r3, r3, #3
 8004e7a:	f043 0302 	orr.w	r3, r3, #2
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	e7e2      	b.n	8004e48 <__smakebuf_r+0xc>
 8004e82:	89a3      	ldrh	r3, [r4, #12]
 8004e84:	6020      	str	r0, [r4, #0]
 8004e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004e92:	b15b      	cbz	r3, 8004eac <__smakebuf_r+0x70>
 8004e94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e98:	4630      	mov	r0, r6
 8004e9a:	f000 f851 	bl	8004f40 <_isatty_r>
 8004e9e:	b128      	cbz	r0, 8004eac <__smakebuf_r+0x70>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	431d      	orrs	r5, r3
 8004eb0:	81a5      	strh	r5, [r4, #12]
 8004eb2:	e7cf      	b.n	8004e54 <__smakebuf_r+0x18>

08004eb4 <_putc_r>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	4606      	mov	r6, r0
 8004ebc:	b118      	cbz	r0, 8004ec6 <_putc_r+0x12>
 8004ebe:	6a03      	ldr	r3, [r0, #32]
 8004ec0:	b90b      	cbnz	r3, 8004ec6 <_putc_r+0x12>
 8004ec2:	f7ff f91f 	bl	8004104 <__sinit>
 8004ec6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ec8:	07d8      	lsls	r0, r3, #31
 8004eca:	d405      	bmi.n	8004ed8 <_putc_r+0x24>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	0599      	lsls	r1, r3, #22
 8004ed0:	d402      	bmi.n	8004ed8 <_putc_r+0x24>
 8004ed2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ed4:	f7ff fb15 	bl	8004502 <__retarget_lock_acquire_recursive>
 8004ed8:	68a3      	ldr	r3, [r4, #8]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	60a3      	str	r3, [r4, #8]
 8004ee0:	da05      	bge.n	8004eee <_putc_r+0x3a>
 8004ee2:	69a2      	ldr	r2, [r4, #24]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	db12      	blt.n	8004f0e <_putc_r+0x5a>
 8004ee8:	b2eb      	uxtb	r3, r5
 8004eea:	2b0a      	cmp	r3, #10
 8004eec:	d00f      	beq.n	8004f0e <_putc_r+0x5a>
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	1c5a      	adds	r2, r3, #1
 8004ef2:	6022      	str	r2, [r4, #0]
 8004ef4:	701d      	strb	r5, [r3, #0]
 8004ef6:	b2ed      	uxtb	r5, r5
 8004ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004efa:	07da      	lsls	r2, r3, #31
 8004efc:	d405      	bmi.n	8004f0a <_putc_r+0x56>
 8004efe:	89a3      	ldrh	r3, [r4, #12]
 8004f00:	059b      	lsls	r3, r3, #22
 8004f02:	d402      	bmi.n	8004f0a <_putc_r+0x56>
 8004f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f06:	f7ff fafd 	bl	8004504 <__retarget_lock_release_recursive>
 8004f0a:	4628      	mov	r0, r5
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4622      	mov	r2, r4
 8004f12:	4630      	mov	r0, r6
 8004f14:	f7ff f9e7 	bl	80042e6 <__swbuf_r>
 8004f18:	4605      	mov	r5, r0
 8004f1a:	e7ed      	b.n	8004ef8 <_putc_r+0x44>

08004f1c <_fstat_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d07      	ldr	r5, [pc, #28]	@ (8004f3c <_fstat_r+0x20>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	4611      	mov	r1, r2
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	f7fb fdf2 	bl	8000b12 <_fstat>
 8004f2e:	1c43      	adds	r3, r0, #1
 8004f30:	d102      	bne.n	8004f38 <_fstat_r+0x1c>
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	b103      	cbz	r3, 8004f38 <_fstat_r+0x1c>
 8004f36:	6023      	str	r3, [r4, #0]
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000278 	.word	0x20000278

08004f40 <_isatty_r>:
 8004f40:	b538      	push	{r3, r4, r5, lr}
 8004f42:	4d06      	ldr	r5, [pc, #24]	@ (8004f5c <_isatty_r+0x1c>)
 8004f44:	2300      	movs	r3, #0
 8004f46:	4604      	mov	r4, r0
 8004f48:	4608      	mov	r0, r1
 8004f4a:	602b      	str	r3, [r5, #0]
 8004f4c:	f7fb fdf1 	bl	8000b32 <_isatty>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_isatty_r+0x1a>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_isatty_r+0x1a>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000278 	.word	0x20000278

08004f60 <_sbrk_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	@ (8004f7c <_sbrk_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fb fdfa 	bl	8000b64 <_sbrk>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_sbrk_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_sbrk_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	20000278 	.word	0x20000278

08004f80 <_init>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	bf00      	nop
 8004f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f86:	bc08      	pop	{r3}
 8004f88:	469e      	mov	lr, r3
 8004f8a:	4770      	bx	lr

08004f8c <_fini>:
 8004f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8e:	bf00      	nop
 8004f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f92:	bc08      	pop	{r3}
 8004f94:	469e      	mov	lr, r3
 8004f96:	4770      	bx	lr
